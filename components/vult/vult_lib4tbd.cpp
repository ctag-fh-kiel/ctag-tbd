
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "vult_lib4tbd.h"

void Phasedist__ctx_type_2_init(Phasedist__ctx_type_2 &_output_){
   Phasedist__ctx_type_2 _ctx;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Phasedist__ctx_type_0_init(_ctx._inst11a);
   _output_ = _ctx;
   return ;
}

float Phasedist_phasor(Phasedist__ctx_type_2 &_ctx, float pitch, uint8_t reset){
   if(Phasedist_change(_ctx._inst11a,pitch)){
      _ctx.rate = Phasedist_pitchToRate(pitch);
   }
   if(reset){
      _ctx.phase = 0.0f;
   }
   else
   {
      _ctx.phase = fmodf((_ctx.phase + _ctx.rate),1.f);
   }
   return _ctx.phase;
}

void Phasedist__ctx_type_3_init(Phasedist__ctx_type_3 &_output_){
   Phasedist__ctx_type_3 _ctx;
   _ctx.pre_phase1 = 0.0f;
   _ctx.pitch = 0.0f;
   _ctx.detune = 0.0f;
   Phasedist__ctx_type_2_init(_ctx._inst239);
   Phasedist__ctx_type_2_init(_ctx._inst139);
   _output_ = _ctx;
   return ;
}

float Phasedist_process(Phasedist__ctx_type_3 &_ctx, float input){
   float phase1;
   phase1 = Phasedist_phasor(_ctx._inst139,_ctx.pitch,false);
   float comp;
   comp = (1.f + (- phase1));
   uint8_t reset;
   reset = ((_ctx.pre_phase1 + (- phase1)) > 0.5f);
   _ctx.pre_phase1 = phase1;
   float phase2;
   phase2 = Phasedist_phasor(_ctx._inst239,(_ctx.pitch + (32.f * _ctx.detune)),reset);
   float sine;
   sine = sinf((6.28318530718f * phase2));
   return (comp * sine);
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.0f;
   _ctx.x1 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0 _ctx;
   _ctx.reset_state = false;
   _ctx.reset_phase = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   _ctx.direction = false;
   Util__ctx_type_0_init(_ctx._inst451);
   Util__ctx_type_0_init(_ctx._inst351);
   Util__ctx_type_1_init(_ctx._inst13b);
   Tricore_default(_ctx);
   _output_ = _ctx;
   return ;
}

float Tricore_process(Tricore__ctx_type_0 &_ctx, float cv, float reset, float disable){
   float out;
   out = 0.0f;
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.rate = (4.f * Util_cvToRate_1024(cv));
   }
   float new_phase;
   float _if_13;
   if(_ctx.direction){
      _if_13 = _ctx.rate;
   }
   else
   {
      _if_13 = (- _ctx.rate);
   }
   new_phase = (_ctx.phase + _if_13);
   uint8_t bdisable;
   bdisable = (disable > 0.5f);
   if(Util_edge(_ctx._inst351,(reset > 0.0f)) || Util_edge(_ctx._inst451,bdisable)){
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = true;
      new_phase = 0.0f;
   }
   if(new_phase > 1024.f){
      new_phase = (1024.f + (- (-1024.f + new_phase)));
      _ctx.direction = false;
   }
   else
   {
      if(new_phase < -1024.f){
         _ctx.direction = true;
      }
   }
   if(bdisable){
      _ctx.phase = 0.0f;
   }
   else
   {
      _ctx.phase = new_phase;
   }
   if(_ctx.reset_state){
      if((fabsf(_ctx.reset_phase) > 10.f) || bdisable){
         float reset_speed;
         if(bdisable){
            reset_speed = 0.01f;
         }
         else
         {
            reset_speed = 0.5f;
         }
         _ctx.reset_phase = (_ctx.reset_phase + (- (_ctx.reset_phase * reset_speed)));
      }
      else
      {
         uint8_t _cond_17;
         _cond_17 = (_ctx.reset_phase > 10.f);
         if(bool_not(_cond_17)){
            _ctx.reset_phase = 0.0f;
         }
         _ctx.reset_state = false;
         _ctx.direction = true;
      }
      out = _ctx.reset_phase;
   }
   out = (_ctx.phase + out);
   return (0.0009765625f * out);
}

void Ad__ctx_type_0_init(Ad__ctx_type_0 &_output_){
   Ad__ctx_type_0 _ctx;
   _ctx.target = 0.0f;
   _ctx.state = 0;
   _ctx.scale = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.out = 0.0f;
   Util__ctx_type_0_init(_ctx._inst251);
   _output_ = _ctx;
   return ;
}

float Ad_do(Ad__ctx_type_0 &_ctx, float gate, float a, float d){
   float a_rate;
   a_rate = (1.f / (0.01f + (100.f * a)));
   float d_rate;
   d_rate = (1.f / (0.01f + (100.f * d)));
   uint8_t bgate;
   bgate = (gate > 0.0f);
   _ctx.out = (_ctx.out + (0.004f * _ctx.rate * (_ctx.target + (- _ctx.out))));
   if(_ctx.state == 0){
      if(Util_edge(_ctx._inst251,bgate)){
         _ctx.state = 1;
         _ctx.scale = (0.2f * gate);
      }
      _ctx.rate = d_rate;
      _ctx.target = 0.0f;
   }
   if(_ctx.state == 1){
      if(bool_not(bgate) || (_ctx.out > 1024.f)){
         _ctx.state = 0;
      }
      _ctx.rate = a_rate;
      _ctx.target = 1228.8f;
   }
   return (_ctx.scale * float_clip((0.0009765625f * _ctx.out),0.0f,1.f));
}

void Ad__ctx_type_1_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1 _ctx;
   _ctx.knob2 = 0.0f;
   _ctx.knob1 = 0.0f;
   Ad__ctx_type_0_init(_ctx._inst1f);
   _output_ = _ctx;
   return ;
}

void Saw_r__ctx_type_0_init(Saw_r__ctx_type_0 &_output_){
   Saw_r__ctx_type_0 _ctx;
   _ctx.phase = 0.0f;
   _ctx.inc = 0.0f;
   Util__ctx_type_1_init(_ctx._inst13b);
   Saw_r_default(_ctx);
   _output_ = _ctx;
   return ;
}

float Saw_r_process(Saw_r__ctx_type_0 &_ctx, float cv){
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.inc = Util_cvToRate(cv);
   }
   float i;
   if(_ctx.inc < 1e-018f){
      i = 1e-018f;
   }
   else
   {
      i = _ctx.inc;
   }
   _ctx.phase = (_ctx.phase + (2.f * _ctx.inc));
   if(_ctx.phase > 2.f){
      _ctx.phase = (-2.f + _ctx.phase);
   }
   float ph;
   ph = (-1.f + _ctx.phase);
   float o;
   o = 0.0f;
   if(ph >= (1.f + (- i))){
      float b;
      b = ((1.f + (- i) + (- ph)) / i);
      o = (ph + (b * fabsf(b)));
   }
   else
   {
      if(ph <= (-1.f + i)){
         float b;
         b = ((-1.f + i + (- ph)) / i);
         o = (ph + (b * fabsf(b)));
      }
      else
      {
         o = ph;
      }
   }
   return o;
}

void Svf__ctx_type_4_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4 _ctx;
   _ctx.z2 = 0.0f;
   _ctx.z1 = 0.0f;
   _ctx.inv_den = 0.0f;
   _ctx.g = 0.0f;
   Util__ctx_type_1_init(_ctx._inst23b);
   Util__ctx_type_1_init(_ctx._inst13b);
   _ctx.R = 0.0f;
   Svf_default(_ctx);
   _output_ = _ctx;
   return ;
}

float Svf_process(Svf__ctx_type_4 &_ctx, float x, float cv, float q, int sel){
   q = (0.5f + q);
   if(Util_change(_ctx._inst13b,cv) || Util_change(_ctx._inst23b,q)){
      _ctx.g = Svf_calc_g(cv);
      _ctx.R = (1.f / (2.f * (1e-018f + q)));
      _ctx.inv_den = (1.f / (1.f + (2.f * _ctx.R * _ctx.g) + (_ctx.g * _ctx.g)));
   }
   float high;
   high = (_ctx.inv_den * (x + (- _ctx.z2) + (- (_ctx.z1 * (_ctx.g + (2.f * _ctx.R))))));
   float band;
   band = (_ctx.z1 + (_ctx.g * high));
   float low;
   low = (_ctx.z2 + (_ctx.g * band));
   float notch;
   notch = (high + low);
   _ctx.z1 = (band + (_ctx.g * high));
   _ctx.z2 = (low + (_ctx.g * band));
   float output;
   switch(sel) {
      case 0:
         output = low;
      break;
      case 1:
         output = high;
      break;
      case 2:
         output = band;
      break;
    default: 
      output = notch;
   }
   return Saturate_soft_process(output);
}

void Swept__ctx_type_0_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0 _ctx;
   _ctx.out = 0.0f;
   Util__ctx_type_0_init(_ctx._inst151);
   _output_ = _ctx;
   return ;
}

float Swept_process(Swept__ctx_type_0 &_ctx, float gate, float start, float end, float rate){
   float a_rate;
   a_rate = (1.f / (0.01f + (100.f * rate)));
   uint8_t bgate;
   bgate = (gate > 0.5f);
   _ctx.out = (_ctx.out + (0.004f * rate * ((- _ctx.out) + (1024.f * end))));
   if(Util_edge(_ctx._inst151,bgate)){
      _ctx.out = (1024.f * start);
   }
   return (0.0009765625f * _ctx.out);
}

float Noise_pinker(Noise__ctx_type_0 &_ctx, float x){
   float b0;
   b0 = 0.0277129863191f;
   float b1;
   b1 = 0.0277129863191f;
   float a1;
   a1 = -0.944574027362f;
   float w0;
   w0 = (x + (- (_ctx.w1 * a1)));
   float y0;
   y0 = ((_ctx.w1 * b1) + (b0 * w0));
   _ctx.w1 = w0;
   return y0;
}

void Noise__ctx_type_1_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1 _ctx;
   _ctx.x2 = 0;
   _ctx.x1 = 0;
   Noise__ctx_type_0_init(_ctx._inst190);
   _output_ = _ctx;
   return ;
}

float Noise_process(Noise__ctx_type_1 &_ctx, float color){
   _ctx.x1 = ((7919 + (17389 * _ctx.x1)) % 32768);
   float y1;
   y1 = (3.0517578125e-005f * int_to_float(_ctx.x1));
   _ctx.x2 = ((12553 + (27449 * _ctx.x2)) % 32768);
   float y2;
   y2 = (3.0517578125e-005f * int_to_float(_ctx.x2));
   float out;
   if(color > 0.5f){
      out = Noise_pinker(_ctx._inst190,(y1 + (- y2)));
   }
   else
   {
      out = (y1 + (- y2));
   }
   return (2.f * out);
}

void Ahr__ctx_type_0_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0 _ctx;
   _ctx.target = 0.0f;
   _ctx.state = 0;
   _ctx.rate = 0.0f;
   _ctx.out = 0.0f;
   _ctx.hold_phase = 0.0f;
   _ctx.do_ret_1 = 0.0f;
   _ctx.do_ret_0 = 0.0f;
   Util__ctx_type_0_init(_ctx._inst351);
   Util__ctx_type_0_init(_ctx._inst151);
   _output_ = _ctx;
   return ;
}

void Ahr_do(Ahr__ctx_type_0 &_ctx, float gate, float a, float h, float r){
   int release;
   release = 0;
   int attack;
   attack = 1;
   int hold;
   hold = 2;
   int reset;
   reset = 3;
   uint8_t bgate;
   bgate = (gate > 0.0f);
   if(Util_edge(_ctx._inst151,bgate)){
      _ctx.state = reset;
   }
   float resetting;
   if(_ctx.state == reset){
      resetting = 1.f;
   }
   else
   {
      resetting = 0.0f;
   }
   if(Util_edge(_ctx._inst351,(_ctx.out > 1024.f))){
      _ctx.hold_phase = 0.0f;
      _ctx.state = hold;
   }
   if((_ctx.out < 10.f) && (_ctx.state == reset)){
      _ctx.state = attack;
   }
   if((_ctx.hold_phase > 100.f) && (_ctx.state == hold)){
      _ctx.state = release;
   }
   if(_ctx.state == reset){
      _ctx.rate = 0.990099009901f;
      _ctx.target = 0.0f;
   }
   if(_ctx.state == attack){
      _ctx.rate = (1.f / (0.01f + (100.f * a)));
      _ctx.target = 1228.8f;
   }
   if(_ctx.state == hold){
      float hrate;
      hrate = (1.f / (0.01f + (100.f * h)));
      _ctx.hold_phase = (_ctx.hold_phase + hrate);
   }
   if(_ctx.state == release){
      _ctx.rate = (1.f / (0.01f + (100.f * r)));
      _ctx.target = 0.0f;
   }
   _ctx.out = (_ctx.out + (0.005f * _ctx.rate * (_ctx.target + (- _ctx.out))));
   _ctx.do_ret_0 = float_clip((0.0009765625f * _ctx.out),0.0f,1.f);
   _ctx.do_ret_1 = resetting;
   return ;
}

void Ahr__ctx_type_1_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1 _ctx;
   _ctx.process_ret_1 = 0.0f;
   _ctx.process_ret_0 = 0.0f;
   _ctx.knob3 = 0.0f;
   _ctx.knob2 = 0.0f;
   _ctx.knob1 = 0.0f;
   Ahr__ctx_type_0_init(_ctx._inst147);
   _output_ = _ctx;
   return ;
}

void Ahr_controlChange(Ahr__ctx_type_1 &_ctx, int control, int value, int channel){
   if(control == 1){
      _ctx.knob1 = (0.00787401574803f * int_to_float(value));
   }
   if(control == 2){
      _ctx.knob2 = (0.00787401574803f * int_to_float(value));
   }
   if(control == 3){
      _ctx.knob3 = (0.00787401574803f * int_to_float(value));
   }
}

void Kick__ctx_type_0_init(Kick__ctx_type_0 &_output_){
   Kick__ctx_type_0 _ctx;
   Noise__ctx_type_1_init(_ctx._inst5ab);
   Ahr__ctx_type_0_init(_ctx._inst447);
   Tricore__ctx_type_0_init(_ctx._inst341);
   Swept__ctx_type_0_init(_ctx._inst2eb);
   Ahr__ctx_type_0_init(_ctx._inst147);
   _output_ = _ctx;
   return ;
}

float Kick_do(Kick__ctx_type_0 &_ctx, float gate, float odecay, float pitch, float swept, float noise){
   float osc_env;
   float env_reset;
   Ahr_do(_ctx._inst147,gate,0.005f,(0.1f + odecay),(0.01f + odecay));
   osc_env = Ahr_do_ret_0(_ctx._inst147);
   env_reset = Ahr_do_ret_1(_ctx._inst147);
   float cv;
   cv = Swept_process(_ctx._inst2eb,(1.f + (- env_reset)),(pitch + (0.4f * swept)),pitch,0.1f);
   float osc;
   osc = Tricore_process(_ctx._inst341,cv,0.0f,env_reset);
   float osc_sat;
   osc_sat = Saturate_process((1.5f * osc));
   float noise_env;
   Ahr_do(_ctx._inst447,gate,0.001f,0.01f,(0.001f + (0.01f * noise)));
   noise_env = Ahr_do_ret_0(_ctx._inst447);
   Ahr_do_ret_1(_ctx._inst447);
   float noise_osc;
   noise_osc = (0.333333333333f * noise * Noise_process(_ctx._inst5ab,1.f));
   return ((noise_env * noise_osc) + (osc_env * osc_sat));
}

void Kick__ctx_type_1_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1 _ctx;
   _ctx.swept = 0.0f;
   _ctx.pitch = 0.0f;
   _ctx.odecay = 0.0f;
   _ctx.noise = 0.0f;
   Kick__ctx_type_0_init(_ctx._inst120);
   _output_ = _ctx;
   return ;
}

void Kick_controlChange(Kick__ctx_type_1 &_ctx, int control, int value, int channel){
   if(control == 30){
      _ctx.odecay = (0.00787401574803f * int_to_float(value));
   }
   if(control == 31){
      _ctx.pitch = Util_map(int_to_float(value),0.0f,127.f,0.0f,0.1f);
   }
   if(control == 32){
      _ctx.swept = (0.00787401574803f * int_to_float(value));
   }
   if(control == 33){
      _ctx.noise = (0.00787401574803f * int_to_float(value));
   }
}

void Monocv__ctx_type_0_init(Monocv__ctx_type_0 &_output_){
   Monocv__ctx_type_0 _ctx;
   _ctx.pre = 0;
   int_init_array(4,0,_ctx.notes);
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

int Monocv_mono_noteOn(Monocv__ctx_type_0 &_ctx, int n){
   if(_ctx.count < 4){
      int_set(_ctx.notes,_ctx.count,n);
      _ctx.pre = n;
      if(_ctx.count < 4){
         _ctx.count = (1 + _ctx.count);
      }
   }
   return _ctx.pre;
}

int Monocv_mono_noteOff(Monocv__ctx_type_0 &_ctx, int n){
   uint8_t found;
   found = false;
   int pos;
   int i;
   i = 0;
   if(_ctx.count == 0){
      return _ctx.pre;
   }
   while((i < 4) && bool_not(found)){
      if(int_get(_ctx.notes,i) == n){
         pos = i;
         found = true;
      }
      i = (1 + i);
   }
   if(found){
      int k;
      k = (1 + pos);
      while(k < 4){
         int_set(_ctx.notes,((-1) + k),int_get(_ctx.notes,k));
         k = (1 + k);
      }
      if(found && (_ctx.count > 0)){
         _ctx.count = ((-1) + _ctx.count);
         _ctx.pre = int_get(_ctx.notes,((-1) + _ctx.count));
      }
   }
   return _ctx.pre;
}

void Monocv__ctx_type_1_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1 _ctx;
   _ctx.vel = 0.0f;
   _ctx.process_ret_2 = 0.0f;
   _ctx.process_ret_1 = 0.0f;
   _ctx.process_ret_0 = 0.0f;
   Monocv__ctx_type_0_init(_ctx.notes);
   _ctx.gate = 0.0f;
   _ctx.cv = 0.0f;
   _ctx.channel_in = 0;
   _ctx.active_note = 0;
   Util__ctx_type_1_init(_ctx._inst13b);
   _output_ = _ctx;
   return ;
}

void Monocv_process(Monocv__ctx_type_1 &_ctx, int c){
   _ctx.channel_in = c;
   if(Monocv_mono_isGateOn(_ctx.notes)){
      _ctx.gate = _ctx.vel;
   }
   else
   {
      _ctx.gate = 0.0f;
   }
   float note;
   note = int_to_float(_ctx.active_note);
   if(Util_change(_ctx._inst13b,note)){
      _ctx.cv = Util_pitchToCv(note);
   }
   _ctx.process_ret_0 = _ctx.cv;
   _ctx.process_ret_1 = _ctx.vel;
   _ctx.process_ret_2 = _ctx.gate;
   return ;
}

void Monocv_noteOn(Monocv__ctx_type_1 &_ctx, int note, int velocity, int channel){
   if(_ctx.channel_in == channel){
      if(velocity > 0){
         _ctx.active_note = Monocv_mono_noteOn(_ctx.notes,note);
         _ctx.vel = (0.00787401574803f * int_to_float(velocity));
      }
      else
      {
         _ctx.active_note = Monocv_mono_noteOff(_ctx.notes,note);
      }
   }
}

float Bitcrush_process(float i, float cv){
   float out;
   out = i;
   if(cv == 0.0f){
      out = i;
   }
   else
   {
      float b;
      b = Bitcrush_factor(cv);
      int x;
      x = float_to_int((b * i));
      out = (int_to_float(x) / b);
   }
   return out;
}

void Sawcore__ctx_type_0_init(Sawcore__ctx_type_0 &_output_){
   Sawcore__ctx_type_0 _ctx;
   _ctx.ptr_w2_ret_1 = 0.0f;
   _ctx.ptr_w2_ret_0 = false;
   _output_ = _ctx;
   return ;
}

void Sawcore_ptr_w2(Sawcore__ctx_type_0 &_ctx, float phase, float rate){
   _tuple___bool_real__ out;
   float s1;
   s1 = rate;
   float s2;
   s2 = (rate + s1);
   if(phase < s1){
      float d;
      d = (phase / rate);
      float t2;
      t2 = (0.0009765625f * s2);
      {
         out.field_0 = false;
         out.field_1 = (1.f + (d * (t2 + (- d))));
      }
   }
   else
   {
      if(phase < s2){
         float d;
         d = (phase / rate);
         float t2;
         t2 = (0.0009765625f * s2);
         {
            out.field_0 = false;
            out.field_1 = (3.f + (d * (-4.f + d + t2)));
         }
      }
      else
      {
         out.field_0 = true;
         out.field_1 = 0.0f;
      }
   }
   _ctx.ptr_w2_ret_0 = out.field_0;_ctx.ptr_w2_ret_1 = out.field_1;
   return ;
}

void Sawcore__ctx_type_1_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1 _ctx;
   _ctx.reset_state = false;
   _ctx.reset_phase = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Sawcore__ctx_type_0_init(_ctx._inst622);
   Util__ctx_type_0_init(_ctx._inst351);
   Util__ctx_type_1_init(_ctx._inst13b);
   Sawcore_default(_ctx);
   _output_ = _ctx;
   return ;
}

float Sawcore_process(Sawcore__ctx_type_1 &_ctx, float cv, float reset){
   float transition;
   transition = 0.0f;
   float out;
   out = 0.0f;
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   float new_phase;
   new_phase = (_ctx.phase + _ctx.rate);
   uint8_t do_reset;
   do_reset = Util_edge(_ctx._inst351,(reset > 0.0f));
   uint8_t do_wrap;
   do_wrap = (new_phase > 1024.f);
   if(do_reset || do_wrap){
      _ctx.reset_phase = _ctx.phase;
      if(do_wrap){
         new_phase = (-1024.f + new_phase);
      }
      else
      {
         new_phase = 0.0f;
      }
      _ctx.reset_state = true;
   }
   _ctx.phase = new_phase;
   out = _ctx.phase;
   if(_ctx.reset_state){
      uint8_t done;
      float ptr;
      Sawcore_ptr_w2(_ctx._inst622,_ctx.phase,_ctx.rate);
      done = Sawcore_ptr_w2_ret_0(_ctx._inst622);
      ptr = Sawcore_ptr_w2_ret_1(_ctx._inst622);
      transition = (0.5f * _ctx.reset_phase * (1.f + ptr));
      if(done){
         _ctx.reset_state = false;
      }
      else
      {
         out = transition;
      }
   }
   return (-1.f + (0.001953125f * out));
}

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0 _ctx;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Util__ctx_type_0_init(_ctx._inst351);
   Util__ctx_type_1_init(_ctx._inst13b);
   Phase_default(_ctx);
   _output_ = _ctx;
   return ;
}

float Phase_process(Phase__ctx_type_0 &_ctx, float cv, float reset){
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   if(Util_edge(_ctx._inst351,(reset > 0.5f))){
      _ctx.phase = 0.0f;
   }
   else
   {
      _ctx.phase = (_ctx.phase + _ctx.rate);
   }
   if(_ctx.phase > 1024.f){
      _ctx.phase = (-1024.f + _ctx.phase);
   }
   return (0.0009765625f * _ctx.phase);
}

void Blit__ctx_type_0_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0 _ctx;
   _ctx.scale = 0.0f;
   _ctx.m = 0;
   Util__ctx_type_1_init(_ctx._inst13b);
   Blit_pulse_start(_ctx);
   _output_ = _ctx;
   return ;
}

float Blit_pulse_train(Blit__ctx_type_0 &_ctx, float cv, float phase){
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.m = (1 + (float_to_int(Util_cvToperiod(cv)) << 1));
      _ctx.scale = (2.f * Util_cvToperiod(cv));
   }
   float pi_phase;
   pi_phase = (0.5f * phase);
   float denominator;
   denominator = Tables_nsine(pi_phase);
   float out;
   out = 0.0f;
   if(denominator <= 1e-018f){
      out = 1.f;
   }
   else
   {
      float m_phase;
      m_phase = fmodf((pi_phase * int_to_float(_ctx.m)),1.f);
      float numerator;
      numerator = Tables_nsine(m_phase);
      out = (numerator / (_ctx.scale * denominator));
   }
   return out;
}

void Blit__ctx_type_1_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1 _ctx;
   _ctx.state_saw = 0.0f;
   _ctx.state_pulse = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.output = 0.0f;
   Blit__ctx_type_0_init(_ctx._inst846);
   Blit__ctx_type_0_init(_ctx._inst746);
   Phase__ctx_type_0_init(_ctx._inst5cd);
   Util__ctx_type_1_init(_ctx._inst33b);
   Util__ctx_type_3_init(_ctx._inst117d);
   Blit_init(_ctx);
   _output_ = _ctx;
   return ;
}

float Blit_osc_blit(Blit__ctx_type_1 &_ctx, float cv, float pw, float wave){
   float fixed_cv;
   fixed_cv = 0.0f;
   if(wave < 1.f){
      fixed_cv = cv;
   }
   else
   {
      fixed_cv = (-0.1f + cv);
   }
   if(Util_change(_ctx._inst33b,fixed_cv)){
      _ctx.rate = Util_cvToRate(fixed_cv);
   }
   float phase;
   phase = Phase_process(_ctx._inst5cd,fixed_cv,0.0f);
   float shift05;
   shift05 = (0.5f + (0.49f * pw));
   float shift;
   shift = (phase + shift05);
   if(shift > 1.f){
      shift = (-1.f + shift);
   }
   float pulse1;
   pulse1 = Blit_pulse_train(_ctx._inst746,fixed_cv,phase);
   float pulse2;
   pulse2 = Blit_pulse_train(_ctx._inst846,fixed_cv,shift);
   _ctx.state_pulse = (pulse1 + (- pulse2) + (0.9995f * _ctx.state_pulse));
   _ctx.state_saw = ((0.5f * ((pulse1 + pulse2 + (-2.f * _ctx.rate)) / shift05)) + (0.9995f * _ctx.state_saw));
   if(wave < 1.f){
      _ctx.output = _ctx.state_pulse;
   }
   else
   {
      _ctx.output = (2.f * _ctx.state_saw);
   }
   _ctx.output = Util_dcblock(_ctx._inst117d,_ctx.output);
   return _ctx.output;
}

void Saw_ptr2__ctx_type_0_init(Saw_ptr2__ctx_type_0 &_output_){
   Saw_ptr2__ctx_type_0 _ctx;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Util__ctx_type_1_init(_ctx._inst13b);
   Saw_ptr2_default(_ctx);
   _output_ = _ctx;
   return ;
}

float Saw_ptr2_process(Saw_ptr2__ctx_type_0 &_ctx, float cv){
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.rate = Util_cvToRate(cv);
   }
   float out;
   float s1;
   s1 = _ctx.rate;
   float s2;
   s2 = (_ctx.rate + s1);
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if(_ctx.phase > 1.f){
      _ctx.phase = (-1.f + _ctx.phase);
   }
   if(_ctx.phase < s1){
      float d;
      d = (_ctx.phase / _ctx.rate);
      out = (1.f + (d * (s2 + (- d))));
   }
   else
   {
      if(_ctx.phase < s2){
         float d;
         d = (_ctx.phase / _ctx.rate);
         out = (3.f + (d * (-4.f + d + s2)));
      }
      else
      {
         out = (-1.f + (2.f * _ctx.phase));
      }
   }
   return out;
}

void Short_delay__ctx_type_0_init(Short_delay__ctx_type_0 &_output_){
   Short_delay__ctx_type_0 _ctx;
   _ctx.x4 = 0.0f;
   _ctx.x3 = 0.0f;
   _ctx.x2 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Short_delay_soft(Short_delay__ctx_type_0 &_ctx, float x1){
   float o;
   o = (0.25f * (_ctx.x2 + _ctx.x3 + _ctx.x4 + x1));
   float _tmp_1_0;
   _tmp_1_0 = x1;
   float _tmp_1_1;
   _tmp_1_1 = _ctx.x2;
   float _tmp_1_2;
   _tmp_1_2 = _ctx.x3;
   _ctx.x2 = _tmp_1_0;
   _ctx.x3 = _tmp_1_1;
   _ctx.x4 = _tmp_1_2;
   return o;
}

void Short_delay__ctx_type_1_init(Short_delay__ctx_type_1 &_output_){
   Short_delay__ctx_type_1 _ctx;
   _ctx.write_pos = 0;
   ;
   _output_ = _ctx;
   return ;
}

float Short_delay_do(Short_delay__ctx_type_1 &_ctx, float x, float time, float feedback){
   time = float_clip(time,0.0f,1.f);
   feedback = float_clip(feedback,0.0f,1.f);
   float index_r;
   index_r = (22050.f * time);
   int index_i;
   index_i = float_to_int(floorf(index_r));
   int delta;
   delta = (_ctx.write_pos + (- index_i));
   int read_pos;
   if(delta < 0){
      read_pos = (22050 + delta);
   }
   else
   {
      read_pos = delta;
   }
   float decimal;
   decimal = (index_r + (- int_to_float(index_i)));
   float x1;
   x1 = float_get(_ctx.buffer,read_pos);
   float x2;
   x2 = float_get(_ctx.buffer,((1 + read_pos) % 22050));
   float ret;
   ret = (x1 + (decimal * (x2 + (- x1))));
   _ctx.write_pos = ((1 + _ctx.write_pos) % 22050);
   float_set(_ctx.buffer,_ctx.write_pos,Saturate_process((x + (feedback * ret))));
   return ret;
}

void Short_delay__ctx_type_2_init(Short_delay__ctx_type_2 &_output_){
   Short_delay__ctx_type_2 _ctx;
   Short_delay__ctx_type_1_init(_ctx._inst2e3);
   Short_delay__ctx_type_0_init(_ctx._inst180);
   _output_ = _ctx;
   return ;
}

void Adsr__ctx_type_0_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0 _ctx;
   _ctx.target = 0.0f;
   _ctx.state = 0;
   _ctx.scale = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.out = 0.0f;
   Util__ctx_type_4_init(_ctx._inst955);
   Util__ctx_type_0_init(_ctx._inst251);
   _output_ = _ctx;
   return ;
}

float Adsr_do(Adsr__ctx_type_0 &_ctx, float gate, float a, float d, float s, float r){
   float a_rate;
   a_rate = (1.f / (0.01f + (100.f * a)));
   float d_rate;
   d_rate = (1.f / (0.01f + (100.f * d)));
   float r_rate;
   r_rate = (1.f / (0.01f + (100.f * r)));
   _ctx.out = (_ctx.out + (0.004f * _ctx.rate * (_ctx.target + (- _ctx.out))));
   uint8_t bgate;
   bgate = (gate > 0.0f);
   if(_ctx.state == 0){
      if(Util_edge(_ctx._inst251,bgate)){
         _ctx.state = 1;
         _ctx.scale = (0.2f * gate);
      }
      _ctx.rate = r_rate;
      _ctx.target = 0.0f;
   }
   if(_ctx.state == 1){
      if(bool_not(bgate)){
         _ctx.state = 0;
      }
      if(_ctx.out > 1024.f){
         _ctx.state = 2;
      }
      _ctx.rate = a_rate;
      _ctx.target = 1228.8f;
   }
   if(_ctx.state == 2){
      if(bool_not(bgate)){
         _ctx.state = 0;
      }
      _ctx.rate = d_rate;
      _ctx.target = (1024.f * s);
   }
   return (Util_smooth(_ctx._inst955,_ctx.scale) * float_clip((0.0009765625f * _ctx.out),0.0f,1.f));
}

void Adsr__ctx_type_1_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1 _ctx;
   _ctx.knob4 = 0.0f;
   _ctx.knob3 = 0.0f;
   _ctx.knob2 = 0.0f;
   _ctx.knob1 = 0.0f;
   Adsr__ctx_type_0_init(_ctx._inst16);
   _output_ = _ctx;
   return ;
}

void Adsr_controlChange(Adsr__ctx_type_1 &_ctx, int control, int value, int channel){
   if(control == 1){
      _ctx.knob1 = (0.00787401574803f * int_to_float(value));
   }
   if(control == 2){
      _ctx.knob2 = (0.00787401574803f * int_to_float(value));
   }
   if(control == 3){
      _ctx.knob3 = (0.00787401574803f * int_to_float(value));
   }
   if(control == 4){
      _ctx.knob4 = (0.00787401574803f * int_to_float(value));
   }
}

void Ladder__ctx_type_4_init(Ladder__ctx_type_4 &_output_){
   Ladder__ctx_type_4 _ctx;
   _ctx.p3 = 0.0f;
   _ctx.p2 = 0.0f;
   _ctx.p1 = 0.0f;
   _ctx.p0 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Ladder_heun(Ladder__ctx_type_4 &_ctx, float input, float fh, float res){
   float wt0;
   wt0 = Util_cubic_clipper((input + (-4.f * _ctx.p3 * res)));
   float wt1;
   wt1 = Util_cubic_clipper(_ctx.p0);
   float dpt0;
   dpt0 = (fh * (wt0 + (- wt1)));
   float wt3;
   wt3 = Util_cubic_clipper(_ctx.p1);
   float dpt1;
   dpt1 = (fh * (wt1 + (- wt3)));
   float wt5;
   wt5 = Util_cubic_clipper(_ctx.p2);
   float dpt2;
   dpt2 = (fh * (wt3 + (- wt5)));
   float wt7;
   wt7 = Util_cubic_clipper(_ctx.p3);
   float dpt3;
   dpt3 = (fh * (wt5 + (- wt7)));
   float pt0;
   pt0 = (_ctx.p0 + dpt0);
   float pt1;
   pt1 = (_ctx.p1 + dpt1);
   float pt2;
   pt2 = (_ctx.p2 + dpt2);
   float pt3;
   pt3 = (_ctx.p3 + dpt3);
   float w0;
   w0 = Util_cubic_clipper((input + (-4.f * pt3 * res)));
   float w1;
   w1 = Util_cubic_clipper(pt0);
   float dp0;
   dp0 = (fh * (w0 + (- w1)));
   float w3;
   w3 = Util_cubic_clipper(pt1);
   float dp1;
   dp1 = (fh * (w1 + (- w3)));
   float w5;
   w5 = Util_cubic_clipper(pt2);
   float dp2;
   dp2 = (fh * (w3 + (- w5)));
   float w7;
   w7 = Util_cubic_clipper(pt3);
   float dp3;
   dp3 = (fh * (w5 + (- w7)));
   _ctx.p0 = (_ctx.p0 + (0.5f * (dp0 + dpt0)));
   _ctx.p1 = (_ctx.p1 + (0.5f * (dp1 + dpt1)));
   _ctx.p2 = (_ctx.p2 + (0.5f * (dp2 + dpt2)));
   _ctx.p3 = (_ctx.p3 + (0.5f * (dp3 + dpt3)));
   return _ctx.p3;
}

void Ladder__ctx_type_5_init(Ladder__ctx_type_5 &_output_){
   Ladder__ctx_type_5 _ctx;
   _ctx.p3 = 0.0f;
   _ctx.p2 = 0.0f;
   _ctx.p1 = 0.0f;
   _ctx.p0 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Ladder_euler(Ladder__ctx_type_5 &_ctx, float input, float fh, float res){
   float w0;
   w0 = Util_cubic_clipper((input + (-4.f * _ctx.p3 * res)));
   float w1;
   w1 = Util_cubic_clipper(_ctx.p0);
   float dpt0;
   dpt0 = (fh * (w0 + (- w1)));
   float w3;
   w3 = Util_cubic_clipper(_ctx.p1);
   float dpt1;
   dpt1 = (fh * (w1 + (- w3)));
   float w5;
   w5 = Util_cubic_clipper(_ctx.p2);
   float dpt2;
   dpt2 = (fh * (w3 + (- w5)));
   float w7;
   w7 = Util_cubic_clipper(_ctx.p3);
   float dpt3;
   dpt3 = (fh * (w5 + (- w7)));
   _ctx.p0 = (_ctx.p0 + dpt0);
   _ctx.p1 = (_ctx.p1 + dpt1);
   _ctx.p2 = (_ctx.p2 + dpt2);
   _ctx.p3 = (_ctx.p3 + dpt3);
   return _ctx.p3;
}

void Ladder__ctx_type_6_init(Ladder__ctx_type_6 &_output_){
   Ladder__ctx_type_6 _ctx;
   _ctx.fh = 0.0f;
   Ladder__ctx_type_5_init(_ctx.e);
   Util__ctx_type_1_init(_ctx._inst13b);
   _output_ = _ctx;
   return ;
}

float Ladder_process_euler(Ladder__ctx_type_6 &_ctx, float input, float cut, float res){
   if(Util_change(_ctx._inst13b,cut)){
      _ctx.fh = Ladder_tune(cut);
   }
   Ladder_euler(_ctx.e,input,_ctx.fh,res);
   Ladder_euler(_ctx.e,input,_ctx.fh,res);
   Ladder_euler(_ctx.e,input,_ctx.fh,res);
   float out;
   out = Ladder_euler(_ctx.e,input,_ctx.fh,res);
   return out;
}

void Ladder__ctx_type_7_init(Ladder__ctx_type_7 &_output_){
   Ladder__ctx_type_7 _ctx;
   Ladder__ctx_type_4_init(_ctx.h);
   _ctx.fh = 0.0f;
   Util__ctx_type_1_init(_ctx._inst13b);
   _output_ = _ctx;
   return ;
}

float Ladder_process_heun(Ladder__ctx_type_7 &_ctx, float input, float cut, float res){
   if(Util_change(_ctx._inst13b,cut)){
      _ctx.fh = Ladder_tune(cut);
   }
   Ladder_heun(_ctx.h,input,_ctx.fh,res);
   Ladder_heun(_ctx.h,input,_ctx.fh,res);
   Ladder_heun(_ctx.h,input,_ctx.fh,res);
   float out;
   out = Ladder_heun(_ctx.h,input,_ctx.fh,res);
   return out;
}

void Gates__ctx_type_1_init(Gates__ctx_type_1 &_output_){
   Gates__ctx_type_1 _ctx;
   int_init_array(8,0,_ctx.vel);
   _ctx.gates_state_ret_7 = 0.0f;
   _ctx.gates_state_ret_6 = 0.0f;
   _ctx.gates_state_ret_5 = 0.0f;
   _ctx.gates_state_ret_4 = 0.0f;
   _ctx.gates_state_ret_3 = 0.0f;
   _ctx.gates_state_ret_2 = 0.0f;
   _ctx.gates_state_ret_1 = 0.0f;
   _ctx.gates_state_ret_0 = 0.0f;
   _output_ = _ctx;
   return ;
}

void Gates_gates_state(Gates__ctx_type_1 &_ctx){
   float vel1;
   vel1 = Gates_velToCV(int_get(_ctx.vel,0));
   float vel2;
   vel2 = Gates_velToCV(int_get(_ctx.vel,1));
   float vel3;
   vel3 = Gates_velToCV(int_get(_ctx.vel,2));
   float vel4;
   vel4 = Gates_velToCV(int_get(_ctx.vel,3));
   float vel5;
   vel5 = Gates_velToCV(int_get(_ctx.vel,4));
   float vel6;
   vel6 = Gates_velToCV(int_get(_ctx.vel,5));
   float vel7;
   vel7 = Gates_velToCV(int_get(_ctx.vel,6));
   float vel8;
   vel8 = Gates_velToCV(int_get(_ctx.vel,7));
   _ctx.gates_state_ret_0 = vel1;
   _ctx.gates_state_ret_1 = vel2;
   _ctx.gates_state_ret_2 = vel3;
   _ctx.gates_state_ret_3 = vel4;
   _ctx.gates_state_ret_4 = vel5;
   _ctx.gates_state_ret_5 = vel6;
   _ctx.gates_state_ret_6 = vel7;
   _ctx.gates_state_ret_7 = vel8;
   return ;
}

void Gates__ctx_type_2_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2 _ctx;
   _ctx.process_ret_7 = 0.0f;
   _ctx.process_ret_6 = 0.0f;
   _ctx.process_ret_5 = 0.0f;
   _ctx.process_ret_4 = 0.0f;
   _ctx.process_ret_3 = 0.0f;
   _ctx.process_ret_2 = 0.0f;
   _ctx.process_ret_1 = 0.0f;
   _ctx.process_ret_0 = 0.0f;
   Gates__ctx_type_1_init(_ctx.gates);
   _ctx.channel_in = 0;
   _output_ = _ctx;
   return ;
}

void Gates_process(Gates__ctx_type_2 &_ctx, int c){
   _ctx.channel_in = c;
   Gates_gates_state(_ctx.gates);
   _ctx.process_ret_0 = Gates_gates_state_ret_0(_ctx.gates);
   _ctx.process_ret_1 = Gates_gates_state_ret_1(_ctx.gates);
   _ctx.process_ret_2 = Gates_gates_state_ret_2(_ctx.gates);
   _ctx.process_ret_3 = Gates_gates_state_ret_3(_ctx.gates);
   _ctx.process_ret_4 = Gates_gates_state_ret_4(_ctx.gates);
   _ctx.process_ret_5 = Gates_gates_state_ret_5(_ctx.gates);
   _ctx.process_ret_6 = Gates_gates_state_ret_6(_ctx.gates);
   _ctx.process_ret_7 = Gates_gates_state_ret_7(_ctx.gates);
   return ;
}

void Rescomb__ctx_type_0_init(Rescomb__ctx_type_0 &_output_){
   Rescomb__ctx_type_0 _ctx;
   _ctx.write_pos = 0;
   float_init_array(675,0.0f,_ctx.buffer);
   _output_ = _ctx;
   return ;
}

float Rescomb_delay(Rescomb__ctx_type_0 &_ctx, float x, float cv){
   _ctx.write_pos = ((1 + _ctx.write_pos) % 675);
   float_set(_ctx.buffer,_ctx.write_pos,x);
   float r_size;
   r_size = 675.f;
   float r_index;
   r_index = fmodf((int_to_float(_ctx.write_pos) + (- Util_cvToperiod(cv))),r_size);
   if(r_index < 0.0f){
      r_index = (r_index + r_size);
   }
   int t1;
   t1 = (float_to_int(floorf(r_index)) % 675);
   int t2;
   t2 = ((1 + t1) % 675);
   float decimal;
   decimal = (r_index + (- int_to_float(t1)));
   float x1;
   x1 = float_get(_ctx.buffer,t1);
   float x2;
   x2 = float_get(_ctx.buffer,t2);
   float ret;
   ret = (x1 + (decimal * (x2 + (- x1))));
   return ret;
}

void Rescomb__ctx_type_5_init(Rescomb__ctx_type_5 &_output_){
   Rescomb__ctx_type_5 _ctx;
   _ctx.stone = 0.0f;
   _ctx.output = 0.0f;
   Rescomb__ctx_type_0_init(_ctx._inst47a);
   Util__ctx_type_3_init(_ctx._inst37d);
   Util__ctx_type_1_init(_ctx._inst13b);
   _output_ = _ctx;
   return ;
}

float Rescomb_do(Rescomb__ctx_type_5 &_ctx, float in, float cv, float tone, float res){
   if(Util_change(_ctx._inst13b,tone)){
      _ctx.stone = Rescomb_toneCurve(tone);
   }
   float feedback;
   feedback = Util_dcblock(_ctx._inst37d,(_ctx.output * res));
   float saturated_input;
   saturated_input = Saturate_soft_process((feedback + in));
   _ctx.output = (in + (_ctx.stone * Rescomb_delay(_ctx._inst47a,saturated_input,cv)));
   return Saturate_soft_process(_ctx.output);
}

void Minblep__ctx_type_2_init(Minblep__ctx_type_2 &_output_){
   Minblep__ctx_type_2 _ctx;
   _ctx.playing = false;
   _ctx.index = 0;
   Util__ctx_type_0_init(_ctx._inst151);
   _output_ = _ctx;
   return ;
}

float Minblep_minblep_play(Minblep__ctx_type_2 &_ctx, uint8_t trigger){
   if(Util_edge(_ctx._inst151,trigger)){
      _ctx.index = 0;
      _ctx.playing = true;
   }
   float out;
   out = 0.0f;
   if(_ctx.playing){
      if(_ctx.index >= Minblep_minblep_samples()){
         _ctx.playing = false;
         _ctx.index = 0;
      }
      else
      {
         _ctx.index = (16 + _ctx.index);
      }
      if(_ctx.playing){
         out = Minblep_minblep(0,_ctx.index);
      }
      else
      {
         out = 0.0f;
      }
   }
   return out;
}

void Minblep__ctx_type_3_init(Minblep__ctx_type_3 &_output_){
   Minblep__ctx_type_3 _ctx;
   _ctx.pre_phase = 0.0f;
   _ctx.active_blep = 0;
   _ctx.acc = 0.0f;
   Minblep__ctx_type_2_init(_ctx._inst7ea);
   Minblep__ctx_type_2_init(_ctx._inst6ea);
   Minblep__ctx_type_2_init(_ctx._inst5ea);
   Minblep__ctx_type_2_init(_ctx._inst4ea);
   Util__ctx_type_0_init(_ctx._inst251);
   Phase__ctx_type_0_init(_ctx._inst1cd);
   _output_ = _ctx;
   return ;
}

float Minblep_minblep_step(Minblep__ctx_type_3 &_ctx, float cv, uint8_t reset){
   float phase;
   phase = Phase_process(_ctx._inst1cd,cv,0.0f);
   uint8_t wrap;
   wrap = ((_ctx.pre_phase + (- phase)) > 0.5f);
   _ctx.pre_phase = phase;
   if(wrap || Util_edge(_ctx._inst251,reset)){
      _ctx.active_blep = ((1 + _ctx.active_blep) % 4);
   }
   float o0;
   o0 = Minblep_minblep_play(_ctx._inst4ea,(_ctx.active_blep == 0));
   float o1;
   o1 = Minblep_minblep_play(_ctx._inst5ea,(_ctx.active_blep == 1));
   float o2;
   o2 = Minblep_minblep_play(_ctx._inst6ea,(_ctx.active_blep == 2));
   float o3;
   o3 = Minblep_minblep_play(_ctx._inst7ea,(_ctx.active_blep == 3));
   float pulses;
   pulses = (o0 + o2 + (- o1) + (- o3));
   _ctx.acc = ((0.996f * _ctx.acc) + (20.f * pulses));
   return _ctx.acc;
}

float Minblep_process(Minblep__ctx_type_4 &_ctx, float cv, float reset){
   uint8_t breset;
   breset = (reset > 0.5f);
   float out1;
   out1 = Minblep_minblep_step(_ctx.o,cv,breset);
   float out2;
   out2 = Minblep_minblep_step(_ctx.o,cv,breset);
   float out3;
   out3 = Minblep_minblep_step(_ctx.o,cv,breset);
   float out4;
   out4 = Minblep_minblep_step(_ctx.o,cv,breset);
   return (0.25f * (out1 + out2 + out3 + out4));
}

void Saw_blit__ctx_type_0_init(Saw_blit__ctx_type_0 &_output_){
   Saw_blit__ctx_type_0 _ctx;
   _ctx.scale = 0.0f;
   _ctx.new_m = 0;
   _ctx.m = 0;
   Util__ctx_type_1_init(_ctx._inst13b);
   Saw_blit_pulse_start(_ctx);
   _output_ = _ctx;
   return ;
}

float Saw_blit_pulse_train(Saw_blit__ctx_type_0 &_ctx, float cv, float phase){
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.new_m = (1 + (float_to_int(Util_cvToperiod(cv)) << 1));
      _ctx.scale = (2.f * Util_cvToperiod(cv));
   }
   float pi_phase;
   pi_phase = (0.5f * phase);
   float denominator;
   denominator = Tables_nsine(pi_phase);
   if((_ctx.new_m != _ctx.m) && (denominator < 0.1f)){
      _ctx.m = _ctx.new_m;
   }
   float out;
   out = 0.0f;
   if(denominator <= 1e-018f){
      out = 1.f;
   }
   else
   {
      float m_phase;
      m_phase = fmodf((pi_phase * int_to_float(_ctx.m)),1.f);
      float numerator;
      numerator = Tables_nsine(m_phase);
      out = (numerator / (_ctx.scale * denominator));
   }
   return out;
}

void Saw_blit__ctx_type_1_init(Saw_blit__ctx_type_1 &_output_){
   Saw_blit__ctx_type_1 _ctx;
   _ctx.state = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   _ctx.output = 0.0f;
   Util__ctx_type_3_init(_ctx._inst47d);
   Saw_blit__ctx_type_0_init(_ctx._inst3e1);
   Util__ctx_type_1_init(_ctx._inst13b);
   Saw_blit_do_default(_ctx);
   _output_ = _ctx;
   return ;
}

float Saw_blit_do(Saw_blit__ctx_type_1 &_ctx, float cv){
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.rate = Util_cvToRate(cv);
   }
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if(_ctx.phase > 1.f){
      _ctx.phase = (-1.f + _ctx.phase);
   }
   float pulse;
   pulse = Saw_blit_pulse_train(_ctx._inst3e1,cv,_ctx.phase);
   _ctx.state = (pulse + (- _ctx.rate) + (0.99f * _ctx.state));
   _ctx.output = Util_dcblock(_ctx._inst47d,_ctx.state);
   return _ctx.output;
}

void Saw_ptr1__ctx_type_0_init(Saw_ptr1__ctx_type_0 &_output_){
   Saw_ptr1__ctx_type_0 _ctx;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Util__ctx_type_1_init(_ctx._inst13b);
   Saw_ptr1_default(_ctx);
   _output_ = _ctx;
   return ;
}

float Saw_ptr1_process(Saw_ptr1__ctx_type_0 &_ctx, float cv){
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.rate = Util_cvToRate(cv);
   }
   float out;
   float s1;
   s1 = _ctx.rate;
   float dc;
   dc = -1.f;
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if(_ctx.phase > 1.f){
      _ctx.phase = (-1.f + _ctx.phase);
   }
   if(_ctx.phase < s1){
      float d;
      d = (_ctx.phase / _ctx.rate);
      out = (2.f + dc + (-2.f * d));
   }
   else
   {
      out = ((- dc) + (2.f * _ctx.phase));
   }
   return out;
}

float Fold_do(float signal, float level){
   float sign;
   if(signal > 0.0f){
      sign = 1.f;
   }
   else
   {
      sign = -1.f;
   }
   float amp;
   amp = (fabsf(signal) * (1.f + (8.f * level)));
   float base;
   base = floorf(amp);
   float delta;
   delta = (amp + (- base));
   float out;
   if((float_to_int(base) % 2) != 0){
      out = (1.f + (- delta));
   }
   else
   {
      out = delta;
   }
   return (out * sign);
}

void Phd__ctx_type_0_init(Phd__ctx_type_0 &_output_){
   Phd__ctx_type_0 _ctx;
   _ctx.pre_phase1 = 0.0f;
   Phase__ctx_type_0_init(_ctx._inst3cd);
   Util__ctx_type_4_init(_ctx._inst255);
   Phase__ctx_type_0_init(_ctx._inst1cd);
   _output_ = _ctx;
   return ;
}

float Phd_process(Phd__ctx_type_0 &_ctx, float cv, float detune){
   float phase1;
   phase1 = Phase_process(_ctx._inst1cd,cv,0.0f);
   float comp;
   comp = (1.f + (- phase1));
   float reset;
   reset = (_ctx.pre_phase1 + (- phase1));
   _ctx.pre_phase1 = phase1;
   float phase2;
   phase2 = Phase_process(_ctx._inst3cd,(cv + Util_smooth(_ctx._inst255,(0.5f * detune))),reset);
   float sine;
   sine = Tables_nsine(phase2);
   return (comp * sine);
}

void Lfo__ctx_type_0_init(Lfo__ctx_type_0 &_output_){
   Lfo__ctx_type_0 _ctx;
   _ctx.x4 = 0.0f;
   _ctx.x3 = 0.0f;
   _ctx.x2 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Lfo_soft(Lfo__ctx_type_0 &_ctx, float x1){
   float o;
   o = (0.25f * (_ctx.x2 + _ctx.x3 + _ctx.x4 + x1));
   float _tmp_1_0;
   _tmp_1_0 = x1;
   float _tmp_1_1;
   _tmp_1_1 = _ctx.x2;
   float _tmp_1_2;
   _tmp_1_2 = _ctx.x3;
   _ctx.x2 = _tmp_1_0;
   _ctx.x3 = _tmp_1_1;
   _ctx.x4 = _tmp_1_2;
   return o;
}

void Lfo__ctx_type_1_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1 _ctx;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Lfo__ctx_type_0_init(_ctx._inst59b);
   Util__ctx_type_0_init(_ctx._inst351);
   Util__ctx_type_1_init(_ctx._inst13b);
   _output_ = _ctx;
   return ;
}

float Lfo_process(Lfo__ctx_type_1 &_ctx, float cv, float shape, float reset){
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.rate = Util_cvToRate((-0.3f + cv));
   }
   _ctx.phase = (_ctx.phase + _ctx.rate);
   if(_ctx.phase > 2.f){
      _ctx.phase = (-2.f + _ctx.phase);
   }
   uint8_t breset;
   breset = (reset > 0.0f);
   if(Util_edge(_ctx._inst351,breset)){
      _ctx.phase = 0.0f;
   }
   float tmp;
   tmp = (-1.f + _ctx.phase);
   float o;
   if(shape < 1.f){
      o = tmp;
   }
   else
   {
      if(shape < 2.f){
         o = (-1.f + (2.f * fabsf(tmp)));
      }
      else
      {
         if(tmp > 0.0f){
            o = 1.f;
         }
         else
         {
            o = 0.0f;
         }
      }
   }
   return Lfo_soft(_ctx._inst59b,o);
}

void Saw_eptr__ctx_type_0_init(Saw_eptr__ctx_type_0 &_output_){
   Saw_eptr__ctx_type_0 _ctx;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Util__ctx_type_1_init(_ctx._inst13b);
   Saw_eptr_default(_ctx);
   _output_ = _ctx;
   return ;
}

float Saw_eptr_process(Saw_eptr__ctx_type_0 &_ctx, float cv){
   float y;
   y = 0.0f;
   if(Util_change(_ctx._inst13b,cv)){
      _ctx.rate = Util_cvToRate(cv);
   }
   _ctx.phase = (_ctx.phase + (2.f * _ctx.rate));
   if(_ctx.phase > (1.f + (- _ctx.rate))){
      y = (-1.f + _ctx.phase + (- (_ctx.phase / _ctx.rate)) + (1.f / _ctx.rate));
      _ctx.phase = (-2.f + _ctx.phase);
   }
   else
   {
      y = _ctx.phase;
   }
   return y;
}

float Polycv_velToGate(int vel){
   float _if_1;
   if(vel > 0){
      _if_1 = (0.00787401574803f * int_to_float(vel));
   }
   else
   {
      _if_1 = 0.0f;
   }
   return _if_1;
}

void Polycv__ctx_type_2_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2 _ctx;
   int_init_array(4,0,_ctx.vel);
   _ctx.polyState_ret_9 = 0.0f;
   _ctx.polyState_ret_8 = 0.0f;
   _ctx.polyState_ret_7 = 0.0f;
   _ctx.polyState_ret_6 = 0.0f;
   _ctx.polyState_ret_5 = 0.0f;
   _ctx.polyState_ret_4 = 0.0f;
   _ctx.polyState_ret_3 = 0.0f;
   _ctx.polyState_ret_2 = 0.0f;
   _ctx.polyState_ret_11 = 0.0f;
   _ctx.polyState_ret_10 = 0.0f;
   _ctx.polyState_ret_1 = 0.0f;
   _ctx.polyState_ret_0 = 0.0f;
   int_init_array(4,0,_ctx.notes);
   _output_ = _ctx;
   return ;
}

void Polycv_poly_noteOn(Polycv__ctx_type_2 &_ctx, int note, int velocity){
   int i;
   i = 0;
   uint8_t found;
   found = false;
   while((i < 4) && bool_not(found)){
      if(int_get(_ctx.vel,i) == 0){
         int_set(_ctx.notes,i,note);
         int_set(_ctx.vel,i,velocity);
         found = true;
      }
      i = (1 + i);
   }
}

void Polycv_poly_noteOff(Polycv__ctx_type_2 &_ctx, int note){
   int i;
   i = 0;
   uint8_t found;
   found = false;
   while((i < 4) && bool_not(found)){
      if(int_get(_ctx.notes,i) == note){
         int_set(_ctx.vel,i,0);
         found = true;
      }
      i = (1 + i);
   }
}

void Polycv_polyState(Polycv__ctx_type_2 &_ctx){
   float note1;
   note1 = Util_pitchToCv(int_to_float(int_get(_ctx.notes,0)));
   float note2;
   note2 = Util_pitchToCv(int_to_float(int_get(_ctx.notes,1)));
   float note3;
   note3 = Util_pitchToCv(int_to_float(int_get(_ctx.notes,2)));
   float note4;
   note4 = Util_pitchToCv(int_to_float(int_get(_ctx.notes,3)));
   float vel1;
   vel1 = Polycv_velToCV(int_get(_ctx.vel,0));
   float vel2;
   vel2 = Polycv_velToCV(int_get(_ctx.vel,1));
   float vel3;
   vel3 = Polycv_velToCV(int_get(_ctx.vel,2));
   float vel4;
   vel4 = Polycv_velToCV(int_get(_ctx.vel,3));
   float gate1;
   gate1 = Polycv_velToGate(int_get(_ctx.vel,0));
   float gate2;
   gate2 = Polycv_velToGate(int_get(_ctx.vel,1));
   float gate3;
   gate3 = Polycv_velToGate(int_get(_ctx.vel,2));
   float gate4;
   gate4 = Polycv_velToGate(int_get(_ctx.vel,3));
   _ctx.polyState_ret_0 = note1;
   _ctx.polyState_ret_1 = vel1;
   _ctx.polyState_ret_2 = gate1;
   _ctx.polyState_ret_3 = note2;
   _ctx.polyState_ret_4 = vel2;
   _ctx.polyState_ret_5 = gate2;
   _ctx.polyState_ret_6 = note3;
   _ctx.polyState_ret_7 = vel3;
   _ctx.polyState_ret_8 = gate3;
   _ctx.polyState_ret_9 = note4;
   _ctx.polyState_ret_10 = vel4;
   _ctx.polyState_ret_11 = gate4;
   return ;
}

void Polycv__ctx_type_3_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3 _ctx;
   _ctx.process_ret_9 = 0.0f;
   _ctx.process_ret_8 = 0.0f;
   _ctx.process_ret_7 = 0.0f;
   _ctx.process_ret_6 = 0.0f;
   _ctx.process_ret_5 = 0.0f;
   _ctx.process_ret_4 = 0.0f;
   _ctx.process_ret_3 = 0.0f;
   _ctx.process_ret_2 = 0.0f;
   _ctx.process_ret_11 = 0.0f;
   _ctx.process_ret_10 = 0.0f;
   _ctx.process_ret_1 = 0.0f;
   _ctx.process_ret_0 = 0.0f;
   Polycv__ctx_type_2_init(_ctx.poly);
   _ctx.channel_in = 0;
   _output_ = _ctx;
   return ;
}

void Polycv_process(Polycv__ctx_type_3 &_ctx, int c){
   _ctx.channel_in = c;
   Polycv_polyState(_ctx.poly);
   _ctx.process_ret_0 = Polycv_polyState_ret_0(_ctx.poly);
   _ctx.process_ret_1 = Polycv_polyState_ret_1(_ctx.poly);
   _ctx.process_ret_2 = Polycv_polyState_ret_2(_ctx.poly);
   _ctx.process_ret_3 = Polycv_polyState_ret_3(_ctx.poly);
   _ctx.process_ret_4 = Polycv_polyState_ret_4(_ctx.poly);
   _ctx.process_ret_5 = Polycv_polyState_ret_5(_ctx.poly);
   _ctx.process_ret_6 = Polycv_polyState_ret_6(_ctx.poly);
   _ctx.process_ret_7 = Polycv_polyState_ret_7(_ctx.poly);
   _ctx.process_ret_8 = Polycv_polyState_ret_8(_ctx.poly);
   _ctx.process_ret_9 = Polycv_polyState_ret_9(_ctx.poly);
   _ctx.process_ret_10 = Polycv_polyState_ret_10(_ctx.poly);
   _ctx.process_ret_11 = Polycv_polyState_ret_11(_ctx.poly);
   return ;
}

void Sine__ctx_type_0_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0 _ctx;
   _ctx.trig = false;
   Phase__ctx_type_0_init(_ctx.p);
   Util__ctx_type_0_init(_ctx._inst151);
   _output_ = _ctx;
   return ;
}

float Sine_process(Sine__ctx_type_0 &_ctx, float cv, float reset){
   if(Util_edge(_ctx._inst151,(reset > 0.5f))){
      _ctx.trig = true;
   }
   float phase;
   phase = Phase_process(_ctx.p,cv,0.0f);
   if((phase < 1e-018f) && _ctx.trig){
      _ctx.trig = false;
      Phase_process(_ctx.p,cv,0.0f);
   }
   return Tables_nsine(phase);
}


