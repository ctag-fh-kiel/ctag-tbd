
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef VULT_LIB4TBD_H
#define VULT_LIB4TBD_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "vult_lib4tbd.tables.h"

typedef struct _tuple___bool_real__ {
   uint8_t field_0;
   float field_1;
} _tuple___bool_real__;

typedef struct _tuple___real_real__ {
   float field_0;
   float field_1;
} _tuple___real_real__;

typedef struct _tuple___real_real_real__ {
   float field_0;
   float field_1;
   float field_2;
} _tuple___real_real_real__;

typedef struct _tuple___real_real_real_real_real_real_real_real__ {
   float field_0;
   float field_1;
   float field_2;
   float field_3;
   float field_4;
   float field_5;
   float field_6;
   float field_7;
} _tuple___real_real_real_real_real_real_real_real__;

typedef struct _tuple___real_real_real_real_real_real_real_real_real_real_real_real__ {
   float field_0;
   float field_1;
   float field_2;
   float field_3;
   float field_4;
   float field_5;
   float field_6;
   float field_7;
   float field_8;
   float field_9;
   float field_10;
   float field_11;
} _tuple___real_real_real_real_real_real_real_real_real_real_real_real__;

typedef struct Phasedist__ctx_type_0 {
   float pre_x;
} Phasedist__ctx_type_0;

typedef Phasedist__ctx_type_0 Phasedist_change_type;

static_inline void Phasedist__ctx_type_0_init(Phasedist__ctx_type_0 &_output_){
   Phasedist__ctx_type_0 _ctx;
   _ctx.pre_x = 0.0f;
   _output_ = _ctx;
   return ;
}

static_inline void Phasedist_change_init(Phasedist__ctx_type_0 &_output_){
   Phasedist__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Phasedist_change(Phasedist__ctx_type_0 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline float Phasedist_pitchToRate(float d){
   return (0.000185392290249f * expf((0.0577623f * d)));
};

typedef struct Phasedist__ctx_type_2 {
   float rate;
   float phase;
   Phasedist__ctx_type_0 _inst11a;
} Phasedist__ctx_type_2;

typedef Phasedist__ctx_type_2 Phasedist_phasor_type;

void Phasedist__ctx_type_2_init(Phasedist__ctx_type_2 &_output_);

static_inline void Phasedist_phasor_init(Phasedist__ctx_type_2 &_output_){
   Phasedist__ctx_type_2_init(_output_);
   return ;
}

float Phasedist_phasor(Phasedist__ctx_type_2 &_ctx, float pitch, uint8_t reset);

typedef struct Phasedist__ctx_type_3 {
   float pre_phase1;
   float pitch;
   float detune;
   Phasedist__ctx_type_2 _inst239;
   Phasedist__ctx_type_2 _inst139;
} Phasedist__ctx_type_3;

typedef Phasedist__ctx_type_3 Phasedist_process_type;

void Phasedist__ctx_type_3_init(Phasedist__ctx_type_3 &_output_);

static_inline void Phasedist_process_init(Phasedist__ctx_type_3 &_output_){
   Phasedist__ctx_type_3_init(_output_);
   return ;
}

float Phasedist_process(Phasedist__ctx_type_3 &_ctx, float input);

typedef Phasedist__ctx_type_3 Phasedist_noteOn_type;

static_inline void Phasedist_noteOn_init(Phasedist__ctx_type_3 &_output_){
   Phasedist__ctx_type_3_init(_output_);
   return ;
}

static_inline void Phasedist_noteOn(Phasedist__ctx_type_3 &_ctx, int note, int velocity, int channel){
   _ctx.pitch = int_to_float(note);
};

typedef Phasedist__ctx_type_3 Phasedist_noteOff_type;

static_inline void Phasedist_noteOff_init(Phasedist__ctx_type_3 &_output_){
   Phasedist__ctx_type_3_init(_output_);
   return ;
}

static_inline void Phasedist_noteOff(Phasedist__ctx_type_3 &_ctx, int note, int channel){
}

typedef Phasedist__ctx_type_3 Phasedist_controlChange_type;

static_inline void Phasedist_controlChange_init(Phasedist__ctx_type_3 &_output_){
   Phasedist__ctx_type_3_init(_output_);
   return ;
}

static_inline void Phasedist_controlChange(Phasedist__ctx_type_3 &_ctx, int control, int value, int channel){
   if(control == 31){
      _ctx.detune = (0.00787401574803f * int_to_float(value));
   }
};

typedef Phasedist__ctx_type_3 Phasedist_default_type;

static_inline void Phasedist_default_init(Phasedist__ctx_type_3 &_output_){
   Phasedist__ctx_type_3_init(_output_);
   return ;
}

static_inline void Phasedist_default(Phasedist__ctx_type_3 &_ctx){
   _ctx.pitch = 45.f;
   _ctx.detune = 0.0f;
}

typedef struct Util__ctx_type_0 {
   uint8_t pre;
} Util__ctx_type_0;

typedef Util__ctx_type_0 Util_edge_type;

static_inline void Util__ctx_type_0_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Util_edge_init(Util__ctx_type_0 &_output_){
   Util__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Util_edge(Util__ctx_type_0 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

typedef struct Util__ctx_type_1 {
   float pre_x;
} Util__ctx_type_1;

typedef Util__ctx_type_1 Util_change_type;

static_inline void Util__ctx_type_1_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1 _ctx;
   _ctx.pre_x = 0.0f;
   _output_ = _ctx;
   return ;
}

static_inline void Util_change_init(Util__ctx_type_1 &_output_){
   Util__ctx_type_1_init(_output_);
   return ;
}

static_inline uint8_t Util_change(Util__ctx_type_1 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline float Util_map(float x, float x0, float x1, float y0, float y1){
   return (y0 + (((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))));
};

typedef struct Util__ctx_type_3 {
   float y1;
   float x1;
} Util__ctx_type_3;

typedef Util__ctx_type_3 Util_dcblock_type;

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_);

static_inline void Util_dcblock_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0);

typedef struct Util__ctx_type_4 {
   float x;
} Util__ctx_type_4;

typedef Util__ctx_type_4 Util_smooth_type;

static_inline void Util__ctx_type_4_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4 _ctx;
   _ctx.x = 0.0f;
   _output_ = _ctx;
   return ;
}

static_inline void Util_smooth_init(Util__ctx_type_4 &_output_){
   Util__ctx_type_4_init(_output_);
   return ;
}

static_inline float Util_smooth(Util__ctx_type_4 &_ctx, float input){
   _ctx.x = (_ctx.x + (0.005f * (input + (- _ctx.x))));
   return _ctx.x;
}

typedef struct Util__ctx_type_5 {
   float x0;
} Util__ctx_type_5;

typedef Util__ctx_type_5 Util_average2_type;

static_inline void Util__ctx_type_5_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5 _ctx;
   _ctx.x0 = 0.0f;
   _output_ = _ctx;
   return ;
}

static_inline void Util_average2_init(Util__ctx_type_5 &_output_){
   Util__ctx_type_5_init(_output_);
   return ;
}

static_inline float Util_average2(Util__ctx_type_5 &_ctx, float x1){
   float result;
   result = (0.5f * (_ctx.x0 + x1));
   _ctx.x0 = x1;
   return result;
}

static_inline float Util_cubic_clipper(float x){
   if(x <= -0.666666666667f){
      return -0.666666666667f;
   }
   else
   {
      if(x >= 0.666666666667f){
         return 0.666666666667f;
      }
      else
      {
         return (x + (-0.333333333333f * x * x * x));
      }
   }
};

static_inline float Util_pitchToRate_1024_raw_c0(int index){
   return Util_pitchToRate_1024_c0[index];
};

static_inline float Util_pitchToRate_1024_raw_c1(int index){
   return Util_pitchToRate_1024_c1[index];
};

static_inline float Util_pitchToRate_1024_raw_c2(int index){
   return Util_pitchToRate_1024_c2[index];
};

static_inline float Util_pitchToRate_1024(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094488189f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_1024_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_1024_c1)[index] + (pitch * float_wrap_array(Util_pitchToRate_1024_c2)[index]))));
}

static_inline float Util_pitchToRate_raw_c0(int index){
   return Util_pitchToRate_c0[index];
};

static_inline float Util_pitchToRate_raw_c1(int index){
   return Util_pitchToRate_c1[index];
};

static_inline float Util_pitchToRate_raw_c2(int index){
   return Util_pitchToRate_c2[index];
};

static_inline float Util_pitchToRate(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094488189f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRate_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRate_c1)[index] + (pitch * float_wrap_array(Util_pitchToRate_c2)[index]))));
}

static_inline float Util_cvToPitch(float cv){
   return (24.f + (120.f * cv));
};

static_inline float Util_cvToRate_1024_raw_c0(int index){
   return Util_cvToRate_1024_c0[index];
};

static_inline float Util_cvToRate_1024_raw_c1(int index){
   return Util_cvToRate_1024_c1[index];
};

static_inline float Util_cvToRate_1024_raw_c2(int index){
   return Util_cvToRate_1024_c2[index];
};

static_inline float Util_cvToRate_1024(float cv){
   int index;
   index = int_clip(float_to_int((34.4444444444f * cv)),0,31);
   return (float_wrap_array(Util_cvToRate_1024_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_1024_c1)[index] + (cv * float_wrap_array(Util_cvToRate_1024_c2)[index]))));
}

static_inline float Util_cvToRate_raw_c0(int index){
   return Util_cvToRate_c0[index];
};

static_inline float Util_cvToRate_raw_c1(int index){
   return Util_cvToRate_c1[index];
};

static_inline float Util_cvToRate_raw_c2(int index){
   return Util_cvToRate_c2[index];
};

static_inline float Util_cvToRate(float cv){
   int index;
   index = int_clip(float_to_int((141.111111111f * cv)),0,127);
   return (float_wrap_array(Util_cvToRate_c0)[index] + (cv * (float_wrap_array(Util_cvToRate_c1)[index] + (cv * float_wrap_array(Util_cvToRate_c2)[index]))));
}

static_inline float Util_pitchToCv(float pitch){
   return (0.00833333333333f * (-24.f + pitch));
};

static_inline float Util_cvToperiod_raw_c0(int index){
   return Util_cvToperiod_c0[index];
};

static_inline float Util_cvToperiod_raw_c1(int index){
   return Util_cvToperiod_c1[index];
};

static_inline float Util_cvToperiod_raw_c2(int index){
   return Util_cvToperiod_c2[index];
};

static_inline float Util_cvToperiod(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvToperiod_c0)[index] + (cv * (float_wrap_array(Util_cvToperiod_c1)[index] + (cv * float_wrap_array(Util_cvToperiod_c2)[index]))));
}

static_inline float Util_cvTokHz_raw_c0(int index){
   return Util_cvTokHz_c0[index];
};

static_inline float Util_cvTokHz_raw_c1(int index){
   return Util_cvTokHz_c1[index];
};

static_inline float Util_cvTokHz_raw_c2(int index){
   return Util_cvTokHz_c2[index];
};

static_inline float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (cv * float_wrap_array(Util_cvTokHz_c2)[index]))));
}

typedef struct Tricore__ctx_type_0 {
   uint8_t reset_state;
   float reset_phase;
   float rate;
   float phase;
   uint8_t direction;
   Util__ctx_type_0 _inst451;
   Util__ctx_type_0 _inst351;
   Util__ctx_type_1 _inst13b;
} Tricore__ctx_type_0;

typedef Tricore__ctx_type_0 Tricore_process_type;

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_);

static_inline void Tricore_process_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

float Tricore_process(Tricore__ctx_type_0 &_ctx, float cv, float reset, float disable);

typedef Tricore__ctx_type_0 Tricore_noteOn_type;

static_inline void Tricore_noteOn_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

static_inline void Tricore_noteOn(Tricore__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

typedef Tricore__ctx_type_0 Tricore_noteOff_type;

static_inline void Tricore_noteOff_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

static_inline void Tricore_noteOff(Tricore__ctx_type_0 &_ctx, int note, int channel){
}

typedef Tricore__ctx_type_0 Tricore_controlChange_type;

static_inline void Tricore_controlChange_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

static_inline void Tricore_controlChange(Tricore__ctx_type_0 &_ctx, int control, int value, int channel){
}

typedef Tricore__ctx_type_0 Tricore_default_type;

static_inline void Tricore_default_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

static_inline void Tricore_default(Tricore__ctx_type_0 &_ctx){
   _ctx.rate = 0.759366720147f;
};

typedef struct Ad__ctx_type_0 {
   float target;
   int state;
   float scale;
   float rate;
   float out;
   Util__ctx_type_0 _inst251;
} Ad__ctx_type_0;

typedef Ad__ctx_type_0 Ad_do_type;

void Ad__ctx_type_0_init(Ad__ctx_type_0 &_output_);

static_inline void Ad_do_init(Ad__ctx_type_0 &_output_){
   Ad__ctx_type_0_init(_output_);
   return ;
}

float Ad_do(Ad__ctx_type_0 &_ctx, float gate, float a, float d);

typedef struct Ad__ctx_type_1 {
   float knob2;
   float knob1;
   Ad__ctx_type_0 _inst1f;
} Ad__ctx_type_1;

typedef Ad__ctx_type_1 Ad_process_type;

void Ad__ctx_type_1_init(Ad__ctx_type_1 &_output_);

static_inline void Ad_process_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1_init(_output_);
   return ;
}

static_inline float Ad_process(Ad__ctx_type_1 &_ctx, float gate){
   return Ad_do(_ctx._inst1f,gate,_ctx.knob1,_ctx.knob2);
};

typedef Ad__ctx_type_1 Ad_noteOn_type;

static_inline void Ad_noteOn_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1_init(_output_);
   return ;
}

static_inline void Ad_noteOn(Ad__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

typedef Ad__ctx_type_1 Ad_noteOff_type;

static_inline void Ad_noteOff_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1_init(_output_);
   return ;
}

static_inline void Ad_noteOff(Ad__ctx_type_1 &_ctx, int note, int channel){
}

typedef Ad__ctx_type_1 Ad_controlChange_type;

static_inline void Ad_controlChange_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1_init(_output_);
   return ;
}

static_inline void Ad_controlChange(Ad__ctx_type_1 &_ctx, int control, int value, int channel){
   if(control == 1){
      _ctx.knob1 = (0.00787401574803f * int_to_float(value));
   }
   if(control == 2){
      _ctx.knob2 = (0.00787401574803f * int_to_float(value));
   }
}

typedef Ad__ctx_type_1 Ad_default_type;

static_inline void Ad_default_init(Ad__ctx_type_1 &_output_){
   Ad__ctx_type_1_init(_output_);
   return ;
}

static_inline void Ad_default(Ad__ctx_type_1 &_ctx){
   _ctx.knob1 = 0.0f;
   _ctx.knob2 = 0.5f;
}

typedef struct Saw_r__ctx_type_0 {
   float phase;
   float inc;
   Util__ctx_type_1 _inst13b;
} Saw_r__ctx_type_0;

typedef Saw_r__ctx_type_0 Saw_r_process_type;

void Saw_r__ctx_type_0_init(Saw_r__ctx_type_0 &_output_);

static_inline void Saw_r_process_init(Saw_r__ctx_type_0 &_output_){
   Saw_r__ctx_type_0_init(_output_);
   return ;
}

float Saw_r_process(Saw_r__ctx_type_0 &_ctx, float cv);

typedef Saw_r__ctx_type_0 Saw_r_noteOn_type;

static_inline void Saw_r_noteOn_init(Saw_r__ctx_type_0 &_output_){
   Saw_r__ctx_type_0_init(_output_);
   return ;
}

static_inline void Saw_r_noteOn(Saw_r__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

typedef Saw_r__ctx_type_0 Saw_r_noteOff_type;

static_inline void Saw_r_noteOff_init(Saw_r__ctx_type_0 &_output_){
   Saw_r__ctx_type_0_init(_output_);
   return ;
}

static_inline void Saw_r_noteOff(Saw_r__ctx_type_0 &_ctx, int note, int channel){
}

typedef Saw_r__ctx_type_0 Saw_r_controlChange_type;

static_inline void Saw_r_controlChange_init(Saw_r__ctx_type_0 &_output_){
   Saw_r__ctx_type_0_init(_output_);
   return ;
}

static_inline void Saw_r_controlChange(Saw_r__ctx_type_0 &_ctx, int control, int value, int channel){
}

typedef Saw_r__ctx_type_0 Saw_r_default_type;

static_inline void Saw_r_default_init(Saw_r__ctx_type_0 &_output_){
   Saw_r__ctx_type_0_init(_output_);
   return ;
}

static_inline void Saw_r_default(Saw_r__ctx_type_0 &_ctx){
   _ctx.inc = 0.000741569062643f;
};

static_inline float Saturate_soft_tanh_table_raw_c0(int index){
   return Saturate_soft_tanh_table_c0[index];
};

static_inline float Saturate_soft_tanh_table_raw_c1(int index){
   return Saturate_soft_tanh_table_c1[index];
};

static_inline float Saturate_soft_tanh_table_raw_c2(int index){
   return Saturate_soft_tanh_table_c2[index];
};

static_inline float Saturate_soft_tanh_table(float x){
   int index;
   index = int_clip(float_to_int((5.f * (24.f + x))),0,240);
   return (float_wrap_array(Saturate_soft_tanh_table_c0)[index] + (x * (float_wrap_array(Saturate_soft_tanh_table_c1)[index] + (x * float_wrap_array(Saturate_soft_tanh_table_c2)[index]))));
}

static_inline float Saturate_soft_process(float x){
   return Saturate_soft_tanh_table(x);
};

static_inline void Saturate_soft_noteOn(int note, int velocity, int channel){
}

static_inline void Saturate_soft_noteOff(int note, int channel){
}

static_inline void Saturate_soft_controlChange(int control, int value, int channel){
}

static_inline void Saturate_soft_default(){
}

static_inline float Svf_calc_g_raw_c0(int index){
   return Svf_calc_g_c0[index];
};

static_inline float Svf_calc_g_raw_c1(int index){
   return Svf_calc_g_c1[index];
};

static_inline float Svf_calc_g_raw_c2(int index){
   return Svf_calc_g_c2[index];
};

static_inline float Svf_calc_g(float cv){
   int index;
   index = int_clip(float_to_int((141.111111111f * cv)),0,127);
   return (float_wrap_array(Svf_calc_g_c0)[index] + (cv * (float_wrap_array(Svf_calc_g_c1)[index] + (cv * float_wrap_array(Svf_calc_g_c2)[index]))));
}

typedef struct Svf__ctx_type_4 {
   float z2;
   float z1;
   float inv_den;
   float g;
   Util__ctx_type_1 _inst23b;
   Util__ctx_type_1 _inst13b;
   float R;
} Svf__ctx_type_4;

typedef Svf__ctx_type_4 Svf_process_type;

void Svf__ctx_type_4_init(Svf__ctx_type_4 &_output_);

static_inline void Svf_process_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

float Svf_process(Svf__ctx_type_4 &_ctx, float x, float cv, float q, int sel);

typedef Svf__ctx_type_4 Svf_noteOn_type;

static_inline void Svf_noteOn_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

static_inline void Svf_noteOn(Svf__ctx_type_4 &_ctx, int note, int velocity, int channel){
}

typedef Svf__ctx_type_4 Svf_noteOff_type;

static_inline void Svf_noteOff_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

static_inline void Svf_noteOff(Svf__ctx_type_4 &_ctx, int note, int channel){
}

typedef Svf__ctx_type_4 Svf_controlChange_type;

static_inline void Svf_controlChange_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

static_inline void Svf_controlChange(Svf__ctx_type_4 &_ctx, int control, int value, int channel){
}

typedef Svf__ctx_type_4 Svf_default_type;

static_inline void Svf_default_init(Svf__ctx_type_4 &_output_){
   Svf__ctx_type_4_init(_output_);
   return ;
}

static_inline void Svf_default(Svf__ctx_type_4 &_ctx){
   _ctx.g = 0.0023297121342f;
   _ctx.R = 1.f;
   _ctx.inv_den = (1.f / (1.f + (_ctx.g * _ctx.g)));
}

typedef struct Swept__ctx_type_0 {
   float out;
   Util__ctx_type_0 _inst151;
} Swept__ctx_type_0;

typedef Swept__ctx_type_0 Swept_process_type;

void Swept__ctx_type_0_init(Swept__ctx_type_0 &_output_);

static_inline void Swept_process_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

float Swept_process(Swept__ctx_type_0 &_ctx, float gate, float start, float end, float rate);

typedef Swept__ctx_type_0 Swept_noteOn_type;

static_inline void Swept_noteOn_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

static_inline void Swept_noteOn(Swept__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

typedef Swept__ctx_type_0 Swept_noteOff_type;

static_inline void Swept_noteOff_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

static_inline void Swept_noteOff(Swept__ctx_type_0 &_ctx, int note, int channel){
}

typedef Swept__ctx_type_0 Swept_controlChange_type;

static_inline void Swept_controlChange_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

static_inline void Swept_controlChange(Swept__ctx_type_0 &_ctx, int control, int value, int channel){
}

typedef Swept__ctx_type_0 Swept_default_type;

static_inline void Swept_default_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

static_inline void Swept_default(Swept__ctx_type_0 &_ctx){
}

static_inline float Saturate_tanh_table_raw_c0(int index){
   return Saturate_tanh_table_c0[index];
};

static_inline float Saturate_tanh_table_raw_c1(int index){
   return Saturate_tanh_table_c1[index];
};

static_inline float Saturate_tanh_table_raw_c2(int index){
   return Saturate_tanh_table_c2[index];
};

static_inline float Saturate_tanh_table(float x){
   int index;
   index = int_clip(float_to_int((5.f * (24.f + x))),0,240);
   return (float_wrap_array(Saturate_tanh_table_c0)[index] + (x * (float_wrap_array(Saturate_tanh_table_c1)[index] + (x * float_wrap_array(Saturate_tanh_table_c2)[index]))));
}

static_inline float Saturate_process(float x){
   return Saturate_tanh_table(x);
};

static_inline void Saturate_noteOn(int note, int velocity, int channel){
}

static_inline void Saturate_noteOff(int note, int channel){
}

static_inline void Saturate_controlChange(int control, int value, int channel){
}

static_inline void Saturate_default(){
}

typedef struct Noise__ctx_type_0 {
   float w1;
} Noise__ctx_type_0;

typedef Noise__ctx_type_0 Noise_pinker_type;

static_inline void Noise__ctx_type_0_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0 _ctx;
   _ctx.w1 = 0.0f;
   _output_ = _ctx;
   return ;
}

static_inline void Noise_pinker_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0_init(_output_);
   return ;
}

float Noise_pinker(Noise__ctx_type_0 &_ctx, float x);

typedef struct Noise__ctx_type_1 {
   int x2;
   int x1;
   Noise__ctx_type_0 _inst190;
} Noise__ctx_type_1;

typedef Noise__ctx_type_1 Noise_process_type;

void Noise__ctx_type_1_init(Noise__ctx_type_1 &_output_);

static_inline void Noise_process_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

float Noise_process(Noise__ctx_type_1 &_ctx, float color);

typedef Noise__ctx_type_1 Noise_noteOn_type;

static_inline void Noise_noteOn_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

static_inline void Noise_noteOn(Noise__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

typedef Noise__ctx_type_1 Noise_noteOff_type;

static_inline void Noise_noteOff_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

static_inline void Noise_noteOff(Noise__ctx_type_1 &_ctx, int note, int channel){
}

typedef Noise__ctx_type_1 Noise_controlChange_type;

static_inline void Noise_controlChange_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

static_inline void Noise_controlChange(Noise__ctx_type_1 &_ctx, int control, int value, int channel){
}

typedef Noise__ctx_type_1 Noise_default_type;

static_inline void Noise_default_init(Noise__ctx_type_1 &_output_){
   Noise__ctx_type_1_init(_output_);
   return ;
}

static_inline void Noise_default(Noise__ctx_type_1 &_ctx){
}

typedef struct Ahr__ctx_type_0 {
   float target;
   int state;
   float rate;
   float out;
   float hold_phase;
   float do_ret_1;
   float do_ret_0;
   Util__ctx_type_0 _inst351;
   Util__ctx_type_0 _inst151;
} Ahr__ctx_type_0;

typedef Ahr__ctx_type_0 Ahr_do_type;

void Ahr__ctx_type_0_init(Ahr__ctx_type_0 &_output_);

static_inline void Ahr_do_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

void Ahr_do(Ahr__ctx_type_0 &_ctx, float gate, float a, float h, float r);

typedef Ahr__ctx_type_0 Ahr_do_ret_0_type;

static_inline void Ahr_do_ret_0_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

static_inline float Ahr_do_ret_0(Ahr__ctx_type_0 &_ctx){
   return _ctx.do_ret_0;
};

typedef Ahr__ctx_type_0 Ahr_do_ret_1_type;

static_inline void Ahr_do_ret_1_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

static_inline float Ahr_do_ret_1(Ahr__ctx_type_0 &_ctx){
   return _ctx.do_ret_1;
};

typedef struct Ahr__ctx_type_1 {
   float process_ret_1;
   float process_ret_0;
   float knob3;
   float knob2;
   float knob1;
   Ahr__ctx_type_0 _inst147;
} Ahr__ctx_type_1;

typedef Ahr__ctx_type_1 Ahr_process_type;

void Ahr__ctx_type_1_init(Ahr__ctx_type_1 &_output_);

static_inline void Ahr_process_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

static_inline void Ahr_process(Ahr__ctx_type_1 &_ctx, float gate){
   Ahr_do(_ctx._inst147,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3);
   _ctx.process_ret_0 = Ahr_do_ret_0(_ctx._inst147);
   _ctx.process_ret_1 = Ahr_do_ret_1(_ctx._inst147);
   return ;
}

typedef Ahr__ctx_type_1 Ahr_process_ret_0_type;

static_inline void Ahr_process_ret_0_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

static_inline float Ahr_process_ret_0(Ahr__ctx_type_1 &_ctx){
   return _ctx.process_ret_0;
};

typedef Ahr__ctx_type_1 Ahr_process_ret_1_type;

static_inline void Ahr_process_ret_1_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

static_inline float Ahr_process_ret_1(Ahr__ctx_type_1 &_ctx){
   return _ctx.process_ret_1;
};

typedef Ahr__ctx_type_1 Ahr_noteOn_type;

static_inline void Ahr_noteOn_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

static_inline void Ahr_noteOn(Ahr__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

typedef Ahr__ctx_type_1 Ahr_noteOff_type;

static_inline void Ahr_noteOff_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

static_inline void Ahr_noteOff(Ahr__ctx_type_1 &_ctx, int note, int channel){
}

typedef Ahr__ctx_type_1 Ahr_controlChange_type;

static_inline void Ahr_controlChange_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_controlChange(Ahr__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Ahr__ctx_type_1 Ahr_default_type;

static_inline void Ahr_default_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

static_inline void Ahr_default(Ahr__ctx_type_1 &_ctx){
   _ctx.knob1 = 0.0f;
   _ctx.knob2 = 0.5f;
   _ctx.knob3 = 0.5f;
}

typedef struct Kick__ctx_type_0 {
   Noise__ctx_type_1 _inst5ab;
   Ahr__ctx_type_0 _inst447;
   Tricore__ctx_type_0 _inst341;
   Swept__ctx_type_0 _inst2eb;
   Ahr__ctx_type_0 _inst147;
} Kick__ctx_type_0;

typedef Kick__ctx_type_0 Kick_do_type;

void Kick__ctx_type_0_init(Kick__ctx_type_0 &_output_);

static_inline void Kick_do_init(Kick__ctx_type_0 &_output_){
   Kick__ctx_type_0_init(_output_);
   return ;
}

float Kick_do(Kick__ctx_type_0 &_ctx, float gate, float odecay, float pitch, float swept, float noise);

typedef struct Kick__ctx_type_1 {
   float swept;
   float pitch;
   float odecay;
   float noise;
   Kick__ctx_type_0 _inst120;
} Kick__ctx_type_1;

typedef Kick__ctx_type_1 Kick_process_type;

void Kick__ctx_type_1_init(Kick__ctx_type_1 &_output_);

static_inline void Kick_process_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

static_inline float Kick_process(Kick__ctx_type_1 &_ctx, float gate){
   return Kick_do(_ctx._inst120,gate,_ctx.odecay,_ctx.pitch,_ctx.swept,_ctx.noise);
};

typedef Kick__ctx_type_1 Kick_noteOn_type;

static_inline void Kick_noteOn_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

static_inline void Kick_noteOn(Kick__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

typedef Kick__ctx_type_1 Kick_noteOff_type;

static_inline void Kick_noteOff_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

static_inline void Kick_noteOff(Kick__ctx_type_1 &_ctx, int note, int channel){
}

typedef Kick__ctx_type_1 Kick_controlChange_type;

static_inline void Kick_controlChange_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

void Kick_controlChange(Kick__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Kick__ctx_type_1 Kick_default_type;

static_inline void Kick_default_init(Kick__ctx_type_1 &_output_){
   Kick__ctx_type_1_init(_output_);
   return ;
}

static_inline void Kick_default(Kick__ctx_type_1 &_ctx){
}

typedef struct Monocv__ctx_type_0 {
   int pre;
   int notes[4];
   int count;
} Monocv__ctx_type_0;

typedef Monocv__ctx_type_0 Monocv_mono_noteOn_type;

void Monocv__ctx_type_0_init(Monocv__ctx_type_0 &_output_);

static_inline void Monocv_mono_noteOn_init(Monocv__ctx_type_0 &_output_){
   Monocv__ctx_type_0_init(_output_);
   return ;
}

int Monocv_mono_noteOn(Monocv__ctx_type_0 &_ctx, int n);

typedef Monocv__ctx_type_0 Monocv_mono_noteOff_type;

static_inline void Monocv_mono_noteOff_init(Monocv__ctx_type_0 &_output_){
   Monocv__ctx_type_0_init(_output_);
   return ;
}

int Monocv_mono_noteOff(Monocv__ctx_type_0 &_ctx, int n);

typedef Monocv__ctx_type_0 Monocv_mono_isGateOn_type;

static_inline void Monocv_mono_isGateOn_init(Monocv__ctx_type_0 &_output_){
   Monocv__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Monocv_mono_isGateOn(Monocv__ctx_type_0 &_ctx){
   return (_ctx.count > 0);
};

typedef struct Monocv__ctx_type_1 {
   float vel;
   float process_ret_2;
   float process_ret_1;
   float process_ret_0;
   Monocv__ctx_type_0 notes;
   float gate;
   float cv;
   int channel_in;
   int active_note;
   Util__ctx_type_1 _inst13b;
} Monocv__ctx_type_1;

typedef Monocv__ctx_type_1 Monocv_process_type;

void Monocv__ctx_type_1_init(Monocv__ctx_type_1 &_output_);

static_inline void Monocv_process_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

void Monocv_process(Monocv__ctx_type_1 &_ctx, int c);

typedef Monocv__ctx_type_1 Monocv_process_ret_0_type;

static_inline void Monocv_process_ret_0_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

static_inline float Monocv_process_ret_0(Monocv__ctx_type_1 &_ctx){
   return _ctx.process_ret_0;
};

typedef Monocv__ctx_type_1 Monocv_process_ret_1_type;

static_inline void Monocv_process_ret_1_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

static_inline float Monocv_process_ret_1(Monocv__ctx_type_1 &_ctx){
   return _ctx.process_ret_1;
};

typedef Monocv__ctx_type_1 Monocv_process_ret_2_type;

static_inline void Monocv_process_ret_2_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

static_inline float Monocv_process_ret_2(Monocv__ctx_type_1 &_ctx){
   return _ctx.process_ret_2;
};

typedef Monocv__ctx_type_1 Monocv_noteOn_type;

static_inline void Monocv_noteOn_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

void Monocv_noteOn(Monocv__ctx_type_1 &_ctx, int note, int velocity, int channel);

typedef Monocv__ctx_type_1 Monocv_noteOff_type;

static_inline void Monocv_noteOff_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

static_inline void Monocv_noteOff(Monocv__ctx_type_1 &_ctx, int note, int channel){
   if(_ctx.channel_in == channel){
      _ctx.active_note = Monocv_mono_noteOff(_ctx.notes,note);
   }
};

typedef Monocv__ctx_type_1 Monocv_controlChange_type;

static_inline void Monocv_controlChange_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

static_inline void Monocv_controlChange(Monocv__ctx_type_1 &_ctx, int control, int value, int channel){
}

typedef Monocv__ctx_type_1 Monocv_default_type;

static_inline void Monocv_default_init(Monocv__ctx_type_1 &_output_){
   Monocv__ctx_type_1_init(_output_);
   return ;
}

static_inline void Monocv_default(Monocv__ctx_type_1 &_ctx){
}

static_inline float Bitcrush_factor_raw_c0(int index){
   return Bitcrush_factor_c0[index];
};

static_inline float Bitcrush_factor_raw_c1(int index){
   return Bitcrush_factor_c1[index];
};

static_inline float Bitcrush_factor_raw_c2(int index){
   return Bitcrush_factor_c2[index];
};

static_inline float Bitcrush_factor(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Bitcrush_factor_c0)[index] + (cv * (float_wrap_array(Bitcrush_factor_c1)[index] + (cv * float_wrap_array(Bitcrush_factor_c2)[index]))));
}

float Bitcrush_process(float i, float cv);

static_inline void Bitcrush_noteOn(int note, int velocity, int channel){
}

static_inline void Bitcrush_noteOff(int note, int channel){
}

static_inline void Bitcrush_controlChange(int control, int value, int channel){
}

static_inline void Bitcrush_default(){
}

typedef struct Sawcore__ctx_type_0 {
   float ptr_w2_ret_1;
   uint8_t ptr_w2_ret_0;
} Sawcore__ctx_type_0;

typedef Sawcore__ctx_type_0 Sawcore_ptr_w2_type;

void Sawcore__ctx_type_0_init(Sawcore__ctx_type_0 &_output_);

static_inline void Sawcore_ptr_w2_init(Sawcore__ctx_type_0 &_output_){
   Sawcore__ctx_type_0_init(_output_);
   return ;
}

void Sawcore_ptr_w2(Sawcore__ctx_type_0 &_ctx, float phase, float rate);

typedef Sawcore__ctx_type_0 Sawcore_ptr_w2_ret_0_type;

static_inline void Sawcore_ptr_w2_ret_0_init(Sawcore__ctx_type_0 &_output_){
   Sawcore__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Sawcore_ptr_w2_ret_0(Sawcore__ctx_type_0 &_ctx){
   return _ctx.ptr_w2_ret_0;
};

typedef Sawcore__ctx_type_0 Sawcore_ptr_w2_ret_1_type;

static_inline void Sawcore_ptr_w2_ret_1_init(Sawcore__ctx_type_0 &_output_){
   Sawcore__ctx_type_0_init(_output_);
   return ;
}

static_inline float Sawcore_ptr_w2_ret_1(Sawcore__ctx_type_0 &_ctx){
   return _ctx.ptr_w2_ret_1;
};

typedef struct Sawcore__ctx_type_1 {
   uint8_t reset_state;
   float reset_phase;
   float rate;
   float phase;
   Sawcore__ctx_type_0 _inst622;
   Util__ctx_type_0 _inst351;
   Util__ctx_type_1 _inst13b;
} Sawcore__ctx_type_1;

typedef Sawcore__ctx_type_1 Sawcore_process_type;

void Sawcore__ctx_type_1_init(Sawcore__ctx_type_1 &_output_);

static_inline void Sawcore_process_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

float Sawcore_process(Sawcore__ctx_type_1 &_ctx, float cv, float reset);

typedef Sawcore__ctx_type_1 Sawcore_noteOn_type;

static_inline void Sawcore_noteOn_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

static_inline void Sawcore_noteOn(Sawcore__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

typedef Sawcore__ctx_type_1 Sawcore_noteOff_type;

static_inline void Sawcore_noteOff_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

static_inline void Sawcore_noteOff(Sawcore__ctx_type_1 &_ctx, int note, int channel){
}

typedef Sawcore__ctx_type_1 Sawcore_controlChange_type;

static_inline void Sawcore_controlChange_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

static_inline void Sawcore_controlChange(Sawcore__ctx_type_1 &_ctx, int control, int value, int channel){
}

typedef Sawcore__ctx_type_1 Sawcore_default_type;

static_inline void Sawcore_default_init(Sawcore__ctx_type_1 &_output_){
   Sawcore__ctx_type_1_init(_output_);
   return ;
}

static_inline void Sawcore_default(Sawcore__ctx_type_1 &_ctx){
   _ctx.rate = 0.759366720147f;
};

static_inline float Tables_nsine_raw_c0(int index){
   return Tables_nsine_c0[index];
};

static_inline float Tables_nsine_raw_c1(int index){
   return Tables_nsine_c1[index];
};

static_inline float Tables_nsine_raw_c2(int index){
   return Tables_nsine_c2[index];
};

static_inline float Tables_nsine(float x){
   int index;
   index = int_clip(float_to_int((127.f * x)),0,127);
   return (float_wrap_array(Tables_nsine_c0)[index] + (x * (float_wrap_array(Tables_nsine_c1)[index] + (x * float_wrap_array(Tables_nsine_c2)[index]))));
}

typedef struct Phase__ctx_type_0 {
   float rate;
   float phase;
   Util__ctx_type_0 _inst351;
   Util__ctx_type_1 _inst13b;
} Phase__ctx_type_0;

typedef Phase__ctx_type_0 Phase_process_type;

void Phase__ctx_type_0_init(Phase__ctx_type_0 &_output_);

static_inline void Phase_process_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

float Phase_process(Phase__ctx_type_0 &_ctx, float cv, float reset);

typedef Phase__ctx_type_0 Phase_noteOn_type;

static_inline void Phase_noteOn_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

static_inline void Phase_noteOn(Phase__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

typedef Phase__ctx_type_0 Phase_noteOff_type;

static_inline void Phase_noteOff_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

static_inline void Phase_noteOff(Phase__ctx_type_0 &_ctx, int note, int channel){
}

typedef Phase__ctx_type_0 Phase_controlChange_type;

static_inline void Phase_controlChange_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

static_inline void Phase_controlChange(Phase__ctx_type_0 &_ctx, int control, int value, int channel){
}

typedef Phase__ctx_type_0 Phase_default_type;

static_inline void Phase_default_init(Phase__ctx_type_0 &_output_){
   Phase__ctx_type_0_init(_output_);
   return ;
}

static_inline void Phase_default(Phase__ctx_type_0 &_ctx){
   _ctx.rate = 0.759366720147f;
};

typedef struct Blit__ctx_type_0 {
   float scale;
   int m;
   Util__ctx_type_1 _inst13b;
} Blit__ctx_type_0;

typedef Blit__ctx_type_0 Blit_pulse_train_type;

void Blit__ctx_type_0_init(Blit__ctx_type_0 &_output_);

static_inline void Blit_pulse_train_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0_init(_output_);
   return ;
}

float Blit_pulse_train(Blit__ctx_type_0 &_ctx, float cv, float phase);

typedef Blit__ctx_type_0 Blit_pulse_start_type;

static_inline void Blit_pulse_start_init(Blit__ctx_type_0 &_output_){
   Blit__ctx_type_0_init(_output_);
   return ;
}

static_inline void Blit_pulse_start(Blit__ctx_type_0 &_ctx){
   _ctx.m = 1349;
   _ctx.scale = 1349.49206955f;
}

typedef struct Blit__ctx_type_1 {
   float state_saw;
   float state_pulse;
   float rate;
   float output;
   Blit__ctx_type_0 _inst846;
   Blit__ctx_type_0 _inst746;
   Phase__ctx_type_0 _inst5cd;
   Util__ctx_type_1 _inst33b;
   Util__ctx_type_3 _inst117d;
} Blit__ctx_type_1;

typedef Blit__ctx_type_1 Blit_osc_blit_type;

void Blit__ctx_type_1_init(Blit__ctx_type_1 &_output_);

static_inline void Blit_osc_blit_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1_init(_output_);
   return ;
}

float Blit_osc_blit(Blit__ctx_type_1 &_ctx, float cv, float pw, float wave);

typedef Blit__ctx_type_1 Blit_init_type;

static_inline void Blit_init_init(Blit__ctx_type_1 &_output_){
   Blit__ctx_type_1_init(_output_);
   return ;
}

static_inline void Blit_init(Blit__ctx_type_1 &_ctx){
   _ctx.rate = 0.000741569062643f;
};

typedef struct Blit__ctx_type_2 {
   Blit__ctx_type_1 _inst14c;
} Blit__ctx_type_2;

typedef Blit__ctx_type_2 Blit_process_type;

static_inline void Blit__ctx_type_2_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2 _ctx;
   Blit__ctx_type_1_init(_ctx._inst14c);
   _output_ = _ctx;
   return ;
}

static_inline void Blit_process_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

static_inline float Blit_process(Blit__ctx_type_2 &_ctx, float cv, float pw, float wave){
   return Blit_osc_blit(_ctx._inst14c,cv,pw,wave);
};

typedef Blit__ctx_type_2 Blit_noteOn_type;

static_inline void Blit_noteOn_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

static_inline void Blit_noteOn(Blit__ctx_type_2 &_ctx, int note, int velocity, int channel){
}

typedef Blit__ctx_type_2 Blit_noteOff_type;

static_inline void Blit_noteOff_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

static_inline void Blit_noteOff(Blit__ctx_type_2 &_ctx, int note, int channel){
}

typedef Blit__ctx_type_2 Blit_controlChange_type;

static_inline void Blit_controlChange_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

static_inline void Blit_controlChange(Blit__ctx_type_2 &_ctx, int control, int value, int channel){
}

typedef Blit__ctx_type_2 Blit_default_type;

static_inline void Blit_default_init(Blit__ctx_type_2 &_output_){
   Blit__ctx_type_2_init(_output_);
   return ;
}

static_inline void Blit_default(Blit__ctx_type_2 &_ctx){
}

typedef struct Saw_ptr2__ctx_type_0 {
   float rate;
   float phase;
   Util__ctx_type_1 _inst13b;
} Saw_ptr2__ctx_type_0;

typedef Saw_ptr2__ctx_type_0 Saw_ptr2_process_type;

void Saw_ptr2__ctx_type_0_init(Saw_ptr2__ctx_type_0 &_output_);

static_inline void Saw_ptr2_process_init(Saw_ptr2__ctx_type_0 &_output_){
   Saw_ptr2__ctx_type_0_init(_output_);
   return ;
}

float Saw_ptr2_process(Saw_ptr2__ctx_type_0 &_ctx, float cv);

typedef Saw_ptr2__ctx_type_0 Saw_ptr2_noteOn_type;

static_inline void Saw_ptr2_noteOn_init(Saw_ptr2__ctx_type_0 &_output_){
   Saw_ptr2__ctx_type_0_init(_output_);
   return ;
}

static_inline void Saw_ptr2_noteOn(Saw_ptr2__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

typedef Saw_ptr2__ctx_type_0 Saw_ptr2_noteOff_type;

static_inline void Saw_ptr2_noteOff_init(Saw_ptr2__ctx_type_0 &_output_){
   Saw_ptr2__ctx_type_0_init(_output_);
   return ;
}

static_inline void Saw_ptr2_noteOff(Saw_ptr2__ctx_type_0 &_ctx, int note, int channel){
}

typedef Saw_ptr2__ctx_type_0 Saw_ptr2_controlChange_type;

static_inline void Saw_ptr2_controlChange_init(Saw_ptr2__ctx_type_0 &_output_){
   Saw_ptr2__ctx_type_0_init(_output_);
   return ;
}

static_inline void Saw_ptr2_controlChange(Saw_ptr2__ctx_type_0 &_ctx, int control, int value, int channel){
}

typedef Saw_ptr2__ctx_type_0 Saw_ptr2_default_type;

static_inline void Saw_ptr2_default_init(Saw_ptr2__ctx_type_0 &_output_){
   Saw_ptr2__ctx_type_0_init(_output_);
   return ;
}

static_inline void Saw_ptr2_default(Saw_ptr2__ctx_type_0 &_ctx){
   _ctx.rate = 0.000741569062643f;
};

typedef struct Short_delay__ctx_type_0 {
   float x4;
   float x3;
   float x2;
} Short_delay__ctx_type_0;

typedef Short_delay__ctx_type_0 Short_delay_soft_type;

void Short_delay__ctx_type_0_init(Short_delay__ctx_type_0 &_output_);

static_inline void Short_delay_soft_init(Short_delay__ctx_type_0 &_output_){
   Short_delay__ctx_type_0_init(_output_);
   return ;
}

float Short_delay_soft(Short_delay__ctx_type_0 &_ctx, float x1);

typedef struct Short_delay__ctx_type_1 {
   int write_pos;
   float buffer[22050];
} Short_delay__ctx_type_1;

typedef Short_delay__ctx_type_1 Short_delay_do_type;

void Short_delay__ctx_type_1_init(Short_delay__ctx_type_1 &_output_);

static_inline void Short_delay_do_init(Short_delay__ctx_type_1 &_output_){
   Short_delay__ctx_type_1_init(_output_);
   return ;
}

float Short_delay_do(Short_delay__ctx_type_1 &_ctx, float x, float time, float feedback);

typedef struct Short_delay__ctx_type_2 {
   Short_delay__ctx_type_1 _inst2e3;
   Short_delay__ctx_type_0 _inst180;
} Short_delay__ctx_type_2;

typedef Short_delay__ctx_type_2 Short_delay_process_type;

void Short_delay__ctx_type_2_init(Short_delay__ctx_type_2 &_output_);

static_inline void Short_delay_process_init(Short_delay__ctx_type_2 &_output_){
   Short_delay__ctx_type_2_init(_output_);
   return ;
}

static_inline float Short_delay_process(Short_delay__ctx_type_2 &_ctx, float x, float time, float feedback){
   return Short_delay_do(_ctx._inst2e3,x,Short_delay_soft(_ctx._inst180,time),feedback);
};

typedef Short_delay__ctx_type_2 Short_delay_noteOn_type;

static_inline void Short_delay_noteOn_init(Short_delay__ctx_type_2 &_output_){
   Short_delay__ctx_type_2_init(_output_);
   return ;
}

static_inline void Short_delay_noteOn(Short_delay__ctx_type_2 &_ctx, int note, int velocity, int channel){
}

typedef Short_delay__ctx_type_2 Short_delay_noteOff_type;

static_inline void Short_delay_noteOff_init(Short_delay__ctx_type_2 &_output_){
   Short_delay__ctx_type_2_init(_output_);
   return ;
}

static_inline void Short_delay_noteOff(Short_delay__ctx_type_2 &_ctx, int note, int channel){
}

typedef Short_delay__ctx_type_2 Short_delay_controlChange_type;

static_inline void Short_delay_controlChange_init(Short_delay__ctx_type_2 &_output_){
   Short_delay__ctx_type_2_init(_output_);
   return ;
}

static_inline void Short_delay_controlChange(Short_delay__ctx_type_2 &_ctx, int control, int value, int channel){
}

typedef Short_delay__ctx_type_2 Short_delay_default_type;

static_inline void Short_delay_default_init(Short_delay__ctx_type_2 &_output_){
   Short_delay__ctx_type_2_init(_output_);
   return ;
}

static_inline void Short_delay_default(Short_delay__ctx_type_2 &_ctx){
}

typedef struct Adsr__ctx_type_0 {
   float target;
   int state;
   float scale;
   float rate;
   float out;
   Util__ctx_type_4 _inst955;
   Util__ctx_type_0 _inst251;
} Adsr__ctx_type_0;

typedef Adsr__ctx_type_0 Adsr_do_type;

void Adsr__ctx_type_0_init(Adsr__ctx_type_0 &_output_);

static_inline void Adsr_do_init(Adsr__ctx_type_0 &_output_){
   Adsr__ctx_type_0_init(_output_);
   return ;
}

float Adsr_do(Adsr__ctx_type_0 &_ctx, float gate, float a, float d, float s, float r);

typedef struct Adsr__ctx_type_1 {
   float knob4;
   float knob3;
   float knob2;
   float knob1;
   Adsr__ctx_type_0 _inst16;
} Adsr__ctx_type_1;

typedef Adsr__ctx_type_1 Adsr_process_type;

void Adsr__ctx_type_1_init(Adsr__ctx_type_1 &_output_);

static_inline void Adsr_process_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

static_inline float Adsr_process(Adsr__ctx_type_1 &_ctx, float gate){
   return Adsr_do(_ctx._inst16,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3,_ctx.knob4);
};

typedef Adsr__ctx_type_1 Adsr_noteOn_type;

static_inline void Adsr_noteOn_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

static_inline void Adsr_noteOn(Adsr__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

typedef Adsr__ctx_type_1 Adsr_noteOff_type;

static_inline void Adsr_noteOff_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

static_inline void Adsr_noteOff(Adsr__ctx_type_1 &_ctx, int note, int channel){
}

typedef Adsr__ctx_type_1 Adsr_controlChange_type;

static_inline void Adsr_controlChange_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

void Adsr_controlChange(Adsr__ctx_type_1 &_ctx, int control, int value, int channel);

typedef Adsr__ctx_type_1 Adsr_default_type;

static_inline void Adsr_default_init(Adsr__ctx_type_1 &_output_){
   Adsr__ctx_type_1_init(_output_);
   return ;
}

static_inline void Adsr_default(Adsr__ctx_type_1 &_ctx){
   _ctx.knob1 = 0.0f;
   _ctx.knob2 = 0.5f;
   _ctx.knob3 = 1.f;
   _ctx.knob4 = 0.5f;
}

static_inline float Ladder_tune_raw_c0(int index){
   return Ladder_tune_c0[index];
};

static_inline float Ladder_tune_raw_c1(int index){
   return Ladder_tune_c1[index];
};

static_inline float Ladder_tune_raw_c2(int index){
   return Ladder_tune_c2[index];
};

static_inline float Ladder_tune(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Ladder_tune_c0)[index] + (cut * (float_wrap_array(Ladder_tune_c1)[index] + (cut * float_wrap_array(Ladder_tune_c2)[index]))));
}

typedef struct Ladder__ctx_type_4 {
   float p3;
   float p2;
   float p1;
   float p0;
} Ladder__ctx_type_4;

typedef Ladder__ctx_type_4 Ladder_heun_type;

void Ladder__ctx_type_4_init(Ladder__ctx_type_4 &_output_);

static_inline void Ladder_heun_init(Ladder__ctx_type_4 &_output_){
   Ladder__ctx_type_4_init(_output_);
   return ;
}

float Ladder_heun(Ladder__ctx_type_4 &_ctx, float input, float fh, float res);

typedef struct Ladder__ctx_type_5 {
   float p3;
   float p2;
   float p1;
   float p0;
} Ladder__ctx_type_5;

typedef Ladder__ctx_type_5 Ladder_euler_type;

void Ladder__ctx_type_5_init(Ladder__ctx_type_5 &_output_);

static_inline void Ladder_euler_init(Ladder__ctx_type_5 &_output_){
   Ladder__ctx_type_5_init(_output_);
   return ;
}

float Ladder_euler(Ladder__ctx_type_5 &_ctx, float input, float fh, float res);

typedef struct Ladder__ctx_type_6 {
   float fh;
   Ladder__ctx_type_5 e;
   Util__ctx_type_1 _inst13b;
} Ladder__ctx_type_6;

typedef Ladder__ctx_type_6 Ladder_process_euler_type;

void Ladder__ctx_type_6_init(Ladder__ctx_type_6 &_output_);

static_inline void Ladder_process_euler_init(Ladder__ctx_type_6 &_output_){
   Ladder__ctx_type_6_init(_output_);
   return ;
}

float Ladder_process_euler(Ladder__ctx_type_6 &_ctx, float input, float cut, float res);

typedef struct Ladder__ctx_type_7 {
   Ladder__ctx_type_4 h;
   float fh;
   Util__ctx_type_1 _inst13b;
} Ladder__ctx_type_7;

typedef Ladder__ctx_type_7 Ladder_process_heun_type;

void Ladder__ctx_type_7_init(Ladder__ctx_type_7 &_output_);

static_inline void Ladder_process_heun_init(Ladder__ctx_type_7 &_output_){
   Ladder__ctx_type_7_init(_output_);
   return ;
}

float Ladder_process_heun(Ladder__ctx_type_7 &_ctx, float input, float cut, float res);

typedef struct Ladder__ctx_type_8 {
   Ladder__ctx_type_7 _inst112;
} Ladder__ctx_type_8;

typedef Ladder__ctx_type_8 Ladder_process_type;

static_inline void Ladder__ctx_type_8_init(Ladder__ctx_type_8 &_output_){
   Ladder__ctx_type_8 _ctx;
   Ladder__ctx_type_7_init(_ctx._inst112);
   _output_ = _ctx;
   return ;
}

static_inline void Ladder_process_init(Ladder__ctx_type_8 &_output_){
   Ladder__ctx_type_8_init(_output_);
   return ;
}

static_inline float Ladder_process(Ladder__ctx_type_8 &_ctx, float input, float cut, float res){
   return Ladder_process_heun(_ctx._inst112,input,cut,res);
};

typedef Ladder__ctx_type_8 Ladder_noteOn_type;

static_inline void Ladder_noteOn_init(Ladder__ctx_type_8 &_output_){
   Ladder__ctx_type_8_init(_output_);
   return ;
}

static_inline void Ladder_noteOn(Ladder__ctx_type_8 &_ctx, int note, int velocity, int channel){
}

typedef Ladder__ctx_type_8 Ladder_noteOff_type;

static_inline void Ladder_noteOff_init(Ladder__ctx_type_8 &_output_){
   Ladder__ctx_type_8_init(_output_);
   return ;
}

static_inline void Ladder_noteOff(Ladder__ctx_type_8 &_ctx, int note, int channel){
}

typedef Ladder__ctx_type_8 Ladder_controlChange_type;

static_inline void Ladder_controlChange_init(Ladder__ctx_type_8 &_output_){
   Ladder__ctx_type_8_init(_output_);
   return ;
}

static_inline void Ladder_controlChange(Ladder__ctx_type_8 &_ctx, int control, int value, int channel){
}

typedef Ladder__ctx_type_8 Ladder_default_type;

static_inline void Ladder_default_init(Ladder__ctx_type_8 &_output_){
   Ladder__ctx_type_8_init(_output_);
   return ;
}

static_inline void Ladder_default(Ladder__ctx_type_8 &_ctx){
}

static_inline float Gates_velToCV(int vel){
   return (0.00787401574803f * int_to_float(vel));
};

typedef struct Gates__ctx_type_1 {
   int vel[8];
   float gates_state_ret_7;
   float gates_state_ret_6;
   float gates_state_ret_5;
   float gates_state_ret_4;
   float gates_state_ret_3;
   float gates_state_ret_2;
   float gates_state_ret_1;
   float gates_state_ret_0;
} Gates__ctx_type_1;

typedef Gates__ctx_type_1 Gates_gates_noteOn_type;

void Gates__ctx_type_1_init(Gates__ctx_type_1 &_output_);

static_inline void Gates_gates_noteOn_init(Gates__ctx_type_1 &_output_){
   Gates__ctx_type_1_init(_output_);
   return ;
}

static_inline void Gates_gates_noteOn(Gates__ctx_type_1 &_ctx, int note, int velocity){
   if((note >= 36) && (note <= 43)){
      int n;
      n = ((-36) + note);
      int_set(_ctx.vel,n,velocity);
   }
};

typedef Gates__ctx_type_1 Gates_gates_noteOff_type;

static_inline void Gates_gates_noteOff_init(Gates__ctx_type_1 &_output_){
   Gates__ctx_type_1_init(_output_);
   return ;
}

static_inline void Gates_gates_noteOff(Gates__ctx_type_1 &_ctx, int note){
   if((note >= 36) && (note <= 43)){
      int n;
      n = ((-36) + note);
      int_set(_ctx.vel,n,0);
   }
};

typedef Gates__ctx_type_1 Gates_gates_state_type;

static_inline void Gates_gates_state_init(Gates__ctx_type_1 &_output_){
   Gates__ctx_type_1_init(_output_);
   return ;
}

void Gates_gates_state(Gates__ctx_type_1 &_ctx);

typedef Gates__ctx_type_1 Gates_gates_state_ret_0_type;

static_inline void Gates_gates_state_ret_0_init(Gates__ctx_type_1 &_output_){
   Gates__ctx_type_1_init(_output_);
   return ;
}

static_inline float Gates_gates_state_ret_0(Gates__ctx_type_1 &_ctx){
   return _ctx.gates_state_ret_0;
};

typedef Gates__ctx_type_1 Gates_gates_state_ret_1_type;

static_inline void Gates_gates_state_ret_1_init(Gates__ctx_type_1 &_output_){
   Gates__ctx_type_1_init(_output_);
   return ;
}

static_inline float Gates_gates_state_ret_1(Gates__ctx_type_1 &_ctx){
   return _ctx.gates_state_ret_1;
};

typedef Gates__ctx_type_1 Gates_gates_state_ret_2_type;

static_inline void Gates_gates_state_ret_2_init(Gates__ctx_type_1 &_output_){
   Gates__ctx_type_1_init(_output_);
   return ;
}

static_inline float Gates_gates_state_ret_2(Gates__ctx_type_1 &_ctx){
   return _ctx.gates_state_ret_2;
};

typedef Gates__ctx_type_1 Gates_gates_state_ret_3_type;

static_inline void Gates_gates_state_ret_3_init(Gates__ctx_type_1 &_output_){
   Gates__ctx_type_1_init(_output_);
   return ;
}

static_inline float Gates_gates_state_ret_3(Gates__ctx_type_1 &_ctx){
   return _ctx.gates_state_ret_3;
};

typedef Gates__ctx_type_1 Gates_gates_state_ret_4_type;

static_inline void Gates_gates_state_ret_4_init(Gates__ctx_type_1 &_output_){
   Gates__ctx_type_1_init(_output_);
   return ;
}

static_inline float Gates_gates_state_ret_4(Gates__ctx_type_1 &_ctx){
   return _ctx.gates_state_ret_4;
};

typedef Gates__ctx_type_1 Gates_gates_state_ret_5_type;

static_inline void Gates_gates_state_ret_5_init(Gates__ctx_type_1 &_output_){
   Gates__ctx_type_1_init(_output_);
   return ;
}

static_inline float Gates_gates_state_ret_5(Gates__ctx_type_1 &_ctx){
   return _ctx.gates_state_ret_5;
};

typedef Gates__ctx_type_1 Gates_gates_state_ret_6_type;

static_inline void Gates_gates_state_ret_6_init(Gates__ctx_type_1 &_output_){
   Gates__ctx_type_1_init(_output_);
   return ;
}

static_inline float Gates_gates_state_ret_6(Gates__ctx_type_1 &_ctx){
   return _ctx.gates_state_ret_6;
};

typedef Gates__ctx_type_1 Gates_gates_state_ret_7_type;

static_inline void Gates_gates_state_ret_7_init(Gates__ctx_type_1 &_output_){
   Gates__ctx_type_1_init(_output_);
   return ;
}

static_inline float Gates_gates_state_ret_7(Gates__ctx_type_1 &_ctx){
   return _ctx.gates_state_ret_7;
};

typedef struct Gates__ctx_type_2 {
   float process_ret_7;
   float process_ret_6;
   float process_ret_5;
   float process_ret_4;
   float process_ret_3;
   float process_ret_2;
   float process_ret_1;
   float process_ret_0;
   Gates__ctx_type_1 gates;
   int channel_in;
} Gates__ctx_type_2;

typedef Gates__ctx_type_2 Gates_process_type;

void Gates__ctx_type_2_init(Gates__ctx_type_2 &_output_);

static_inline void Gates_process_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2_init(_output_);
   return ;
}

void Gates_process(Gates__ctx_type_2 &_ctx, int c);

typedef Gates__ctx_type_2 Gates_process_ret_0_type;

static_inline void Gates_process_ret_0_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2_init(_output_);
   return ;
}

static_inline float Gates_process_ret_0(Gates__ctx_type_2 &_ctx){
   return _ctx.process_ret_0;
};

typedef Gates__ctx_type_2 Gates_process_ret_1_type;

static_inline void Gates_process_ret_1_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2_init(_output_);
   return ;
}

static_inline float Gates_process_ret_1(Gates__ctx_type_2 &_ctx){
   return _ctx.process_ret_1;
};

typedef Gates__ctx_type_2 Gates_process_ret_2_type;

static_inline void Gates_process_ret_2_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2_init(_output_);
   return ;
}

static_inline float Gates_process_ret_2(Gates__ctx_type_2 &_ctx){
   return _ctx.process_ret_2;
};

typedef Gates__ctx_type_2 Gates_process_ret_3_type;

static_inline void Gates_process_ret_3_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2_init(_output_);
   return ;
}

static_inline float Gates_process_ret_3(Gates__ctx_type_2 &_ctx){
   return _ctx.process_ret_3;
};

typedef Gates__ctx_type_2 Gates_process_ret_4_type;

static_inline void Gates_process_ret_4_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2_init(_output_);
   return ;
}

static_inline float Gates_process_ret_4(Gates__ctx_type_2 &_ctx){
   return _ctx.process_ret_4;
};

typedef Gates__ctx_type_2 Gates_process_ret_5_type;

static_inline void Gates_process_ret_5_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2_init(_output_);
   return ;
}

static_inline float Gates_process_ret_5(Gates__ctx_type_2 &_ctx){
   return _ctx.process_ret_5;
};

typedef Gates__ctx_type_2 Gates_process_ret_6_type;

static_inline void Gates_process_ret_6_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2_init(_output_);
   return ;
}

static_inline float Gates_process_ret_6(Gates__ctx_type_2 &_ctx){
   return _ctx.process_ret_6;
};

typedef Gates__ctx_type_2 Gates_process_ret_7_type;

static_inline void Gates_process_ret_7_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2_init(_output_);
   return ;
}

static_inline float Gates_process_ret_7(Gates__ctx_type_2 &_ctx){
   return _ctx.process_ret_7;
};

typedef Gates__ctx_type_2 Gates_noteOn_type;

static_inline void Gates_noteOn_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2_init(_output_);
   return ;
}

static_inline void Gates_noteOn(Gates__ctx_type_2 &_ctx, int note, int velocity, int channel){
   if(_ctx.channel_in == channel){
      Gates_gates_noteOn(_ctx.gates,note,velocity);
   }
};

typedef Gates__ctx_type_2 Gates_noteOff_type;

static_inline void Gates_noteOff_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2_init(_output_);
   return ;
}

static_inline void Gates_noteOff(Gates__ctx_type_2 &_ctx, int note, int channel){
   if(_ctx.channel_in == channel){
      Gates_gates_noteOff(_ctx.gates,note);
   }
};

typedef Gates__ctx_type_2 Gates_controlChange_type;

static_inline void Gates_controlChange_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2_init(_output_);
   return ;
}

static_inline void Gates_controlChange(Gates__ctx_type_2 &_ctx, int control, int value, int channel){
}

typedef Gates__ctx_type_2 Gates_default_type;

static_inline void Gates_default_init(Gates__ctx_type_2 &_output_){
   Gates__ctx_type_2_init(_output_);
   return ;
}

static_inline void Gates_default(Gates__ctx_type_2 &_ctx){
}

static_inline float Clipper_process(float x){
   return Util_cubic_clipper(x);
};

static_inline void Clipper_noteOn(int note, int velocity, int channel){
}

static_inline void Clipper_noteOff(int note, int channel){
}

static_inline void Clipper_controlChange(int control, int value, int channel){
}

static_inline void Clipper_default(){
}

typedef struct Rescomb__ctx_type_0 {
   int write_pos;
   float buffer[675];
} Rescomb__ctx_type_0;

typedef Rescomb__ctx_type_0 Rescomb_delay_type;

void Rescomb__ctx_type_0_init(Rescomb__ctx_type_0 &_output_);

static_inline void Rescomb_delay_init(Rescomb__ctx_type_0 &_output_){
   Rescomb__ctx_type_0_init(_output_);
   return ;
}

float Rescomb_delay(Rescomb__ctx_type_0 &_ctx, float x, float cv);

static_inline float Rescomb_toneCurve_raw_c0(int index){
   return Rescomb_toneCurve_c0[index];
};

static_inline float Rescomb_toneCurve_raw_c1(int index){
   return Rescomb_toneCurve_c1[index];
};

static_inline float Rescomb_toneCurve_raw_c2(int index){
   return Rescomb_toneCurve_c2[index];
};

static_inline float Rescomb_toneCurve(float tone){
   int index;
   index = int_clip(float_to_int((26.25f * (1.2f + tone))),0,63);
   return (float_wrap_array(Rescomb_toneCurve_c0)[index] + (tone * (float_wrap_array(Rescomb_toneCurve_c1)[index] + (tone * float_wrap_array(Rescomb_toneCurve_c2)[index]))));
}

typedef struct Rescomb__ctx_type_5 {
   float stone;
   float output;
   Rescomb__ctx_type_0 _inst47a;
   Util__ctx_type_3 _inst37d;
   Util__ctx_type_1 _inst13b;
} Rescomb__ctx_type_5;

typedef Rescomb__ctx_type_5 Rescomb_do_type;

void Rescomb__ctx_type_5_init(Rescomb__ctx_type_5 &_output_);

static_inline void Rescomb_do_init(Rescomb__ctx_type_5 &_output_){
   Rescomb__ctx_type_5_init(_output_);
   return ;
}

float Rescomb_do(Rescomb__ctx_type_5 &_ctx, float in, float cv, float tone, float res);

typedef struct Rescomb__ctx_type_6 {
   Rescomb__ctx_type_5 _inst179;
} Rescomb__ctx_type_6;

typedef Rescomb__ctx_type_6 Rescomb_process_type;

static_inline void Rescomb__ctx_type_6_init(Rescomb__ctx_type_6 &_output_){
   Rescomb__ctx_type_6 _ctx;
   Rescomb__ctx_type_5_init(_ctx._inst179);
   _output_ = _ctx;
   return ;
}

static_inline void Rescomb_process_init(Rescomb__ctx_type_6 &_output_){
   Rescomb__ctx_type_6_init(_output_);
   return ;
}

static_inline float Rescomb_process(Rescomb__ctx_type_6 &_ctx, float in, float cv, float tone, float res){
   return Rescomb_do(_ctx._inst179,in,cv,tone,res);
};

typedef Rescomb__ctx_type_6 Rescomb_noteOn_type;

static_inline void Rescomb_noteOn_init(Rescomb__ctx_type_6 &_output_){
   Rescomb__ctx_type_6_init(_output_);
   return ;
}

static_inline void Rescomb_noteOn(Rescomb__ctx_type_6 &_ctx, int note, int velocity, int channel){
}

typedef Rescomb__ctx_type_6 Rescomb_noteOff_type;

static_inline void Rescomb_noteOff_init(Rescomb__ctx_type_6 &_output_){
   Rescomb__ctx_type_6_init(_output_);
   return ;
}

static_inline void Rescomb_noteOff(Rescomb__ctx_type_6 &_ctx, int note, int channel){
}

typedef Rescomb__ctx_type_6 Rescomb_controlChange_type;

static_inline void Rescomb_controlChange_init(Rescomb__ctx_type_6 &_output_){
   Rescomb__ctx_type_6_init(_output_);
   return ;
}

static_inline void Rescomb_controlChange(Rescomb__ctx_type_6 &_ctx, int control, int value, int channel){
}

typedef Rescomb__ctx_type_6 Rescomb_default_type;

static_inline void Rescomb_default_init(Rescomb__ctx_type_6 &_output_){
   Rescomb__ctx_type_6_init(_output_);
   return ;
}

static_inline void Rescomb_default(Rescomb__ctx_type_6 &_ctx){
}

static_inline int Minblep_minblep_samples(){
   return 678;
};

static_inline float Minblep_minblep(int ch, int i){
   if(ch == 0){
      return float_wrap_array(Minblep_minblep_chan_0)[(i % 678)];
   }
   return 0.0f;
}

typedef struct Minblep__ctx_type_2 {
   uint8_t playing;
   int index;
   Util__ctx_type_0 _inst151;
} Minblep__ctx_type_2;

typedef Minblep__ctx_type_2 Minblep_minblep_play_type;

void Minblep__ctx_type_2_init(Minblep__ctx_type_2 &_output_);

static_inline void Minblep_minblep_play_init(Minblep__ctx_type_2 &_output_){
   Minblep__ctx_type_2_init(_output_);
   return ;
}

float Minblep_minblep_play(Minblep__ctx_type_2 &_ctx, uint8_t trigger);

typedef struct Minblep__ctx_type_3 {
   float pre_phase;
   int active_blep;
   float acc;
   Minblep__ctx_type_2 _inst7ea;
   Minblep__ctx_type_2 _inst6ea;
   Minblep__ctx_type_2 _inst5ea;
   Minblep__ctx_type_2 _inst4ea;
   Util__ctx_type_0 _inst251;
   Phase__ctx_type_0 _inst1cd;
} Minblep__ctx_type_3;

typedef Minblep__ctx_type_3 Minblep_minblep_step_type;

void Minblep__ctx_type_3_init(Minblep__ctx_type_3 &_output_);

static_inline void Minblep_minblep_step_init(Minblep__ctx_type_3 &_output_){
   Minblep__ctx_type_3_init(_output_);
   return ;
}

float Minblep_minblep_step(Minblep__ctx_type_3 &_ctx, float cv, uint8_t reset);

typedef struct Minblep__ctx_type_4 {
   Minblep__ctx_type_3 o;
} Minblep__ctx_type_4;

typedef Minblep__ctx_type_4 Minblep_process_type;

static_inline void Minblep__ctx_type_4_init(Minblep__ctx_type_4 &_output_){
   Minblep__ctx_type_4 _ctx;
   Minblep__ctx_type_3_init(_ctx.o);
   _output_ = _ctx;
   return ;
}

static_inline void Minblep_process_init(Minblep__ctx_type_4 &_output_){
   Minblep__ctx_type_4_init(_output_);
   return ;
}

float Minblep_process(Minblep__ctx_type_4 &_ctx, float cv, float reset);

typedef Minblep__ctx_type_4 Minblep_noteOn_type;

static_inline void Minblep_noteOn_init(Minblep__ctx_type_4 &_output_){
   Minblep__ctx_type_4_init(_output_);
   return ;
}

static_inline void Minblep_noteOn(Minblep__ctx_type_4 &_ctx, int note, int velocity, int channel){
}

typedef Minblep__ctx_type_4 Minblep_noteOff_type;

static_inline void Minblep_noteOff_init(Minblep__ctx_type_4 &_output_){
   Minblep__ctx_type_4_init(_output_);
   return ;
}

static_inline void Minblep_noteOff(Minblep__ctx_type_4 &_ctx, int note, int channel){
}

typedef Minblep__ctx_type_4 Minblep_controlChange_type;

static_inline void Minblep_controlChange_init(Minblep__ctx_type_4 &_output_){
   Minblep__ctx_type_4_init(_output_);
   return ;
}

static_inline void Minblep_controlChange(Minblep__ctx_type_4 &_ctx, int control, int value, int channel){
}

typedef Minblep__ctx_type_4 Minblep_default_type;

static_inline void Minblep_default_init(Minblep__ctx_type_4 &_output_){
   Minblep__ctx_type_4_init(_output_);
   return ;
}

static_inline void Minblep_default(Minblep__ctx_type_4 &_ctx){
}

typedef struct Saw_blit__ctx_type_0 {
   float scale;
   int new_m;
   int m;
   Util__ctx_type_1 _inst13b;
} Saw_blit__ctx_type_0;

typedef Saw_blit__ctx_type_0 Saw_blit_pulse_train_type;

void Saw_blit__ctx_type_0_init(Saw_blit__ctx_type_0 &_output_);

static_inline void Saw_blit_pulse_train_init(Saw_blit__ctx_type_0 &_output_){
   Saw_blit__ctx_type_0_init(_output_);
   return ;
}

float Saw_blit_pulse_train(Saw_blit__ctx_type_0 &_ctx, float cv, float phase);

typedef Saw_blit__ctx_type_0 Saw_blit_pulse_start_type;

static_inline void Saw_blit_pulse_start_init(Saw_blit__ctx_type_0 &_output_){
   Saw_blit__ctx_type_0_init(_output_);
   return ;
}

static_inline void Saw_blit_pulse_start(Saw_blit__ctx_type_0 &_ctx){
   _ctx.m = 1349;
   _ctx.scale = 1349.49206955f;
}

typedef struct Saw_blit__ctx_type_1 {
   float state;
   float rate;
   float phase;
   float output;
   Util__ctx_type_3 _inst47d;
   Saw_blit__ctx_type_0 _inst3e1;
   Util__ctx_type_1 _inst13b;
} Saw_blit__ctx_type_1;

typedef Saw_blit__ctx_type_1 Saw_blit_do_type;

void Saw_blit__ctx_type_1_init(Saw_blit__ctx_type_1 &_output_);

static_inline void Saw_blit_do_init(Saw_blit__ctx_type_1 &_output_){
   Saw_blit__ctx_type_1_init(_output_);
   return ;
}

float Saw_blit_do(Saw_blit__ctx_type_1 &_ctx, float cv);

typedef Saw_blit__ctx_type_1 Saw_blit_do_default_type;

static_inline void Saw_blit_do_default_init(Saw_blit__ctx_type_1 &_output_){
   Saw_blit__ctx_type_1_init(_output_);
   return ;
}

static_inline void Saw_blit_do_default(Saw_blit__ctx_type_1 &_ctx){
   _ctx.rate = 0.000741569062643f;
};

typedef struct Saw_blit__ctx_type_2 {
   Saw_blit__ctx_type_1 osc;
} Saw_blit__ctx_type_2;

typedef Saw_blit__ctx_type_2 Saw_blit_process_type;

static_inline void Saw_blit__ctx_type_2_init(Saw_blit__ctx_type_2 &_output_){
   Saw_blit__ctx_type_2 _ctx;
   Saw_blit__ctx_type_1_init(_ctx.osc);
   _output_ = _ctx;
   return ;
}

static_inline void Saw_blit_process_init(Saw_blit__ctx_type_2 &_output_){
   Saw_blit__ctx_type_2_init(_output_);
   return ;
}

static_inline float Saw_blit_process(Saw_blit__ctx_type_2 &_ctx, float cv){
   float output;
   output = Saw_blit_do(_ctx.osc,cv);
   return output;
}

typedef Saw_blit__ctx_type_2 Saw_blit_noteOn_type;

static_inline void Saw_blit_noteOn_init(Saw_blit__ctx_type_2 &_output_){
   Saw_blit__ctx_type_2_init(_output_);
   return ;
}

static_inline void Saw_blit_noteOn(Saw_blit__ctx_type_2 &_ctx, int note, int velocity, int channel){
}

typedef Saw_blit__ctx_type_2 Saw_blit_noteOff_type;

static_inline void Saw_blit_noteOff_init(Saw_blit__ctx_type_2 &_output_){
   Saw_blit__ctx_type_2_init(_output_);
   return ;
}

static_inline void Saw_blit_noteOff(Saw_blit__ctx_type_2 &_ctx, int note, int channel){
}

typedef Saw_blit__ctx_type_2 Saw_blit_controlChange_type;

static_inline void Saw_blit_controlChange_init(Saw_blit__ctx_type_2 &_output_){
   Saw_blit__ctx_type_2_init(_output_);
   return ;
}

static_inline void Saw_blit_controlChange(Saw_blit__ctx_type_2 &_ctx, int control, int value, int channel){
}

typedef Saw_blit__ctx_type_2 Saw_blit_default_type;

static_inline void Saw_blit_default_init(Saw_blit__ctx_type_2 &_output_){
   Saw_blit__ctx_type_2_init(_output_);
   return ;
}

static_inline void Saw_blit_default(Saw_blit__ctx_type_2 &_ctx){
}

typedef struct Saw_ptr1__ctx_type_0 {
   float rate;
   float phase;
   Util__ctx_type_1 _inst13b;
} Saw_ptr1__ctx_type_0;

typedef Saw_ptr1__ctx_type_0 Saw_ptr1_process_type;

void Saw_ptr1__ctx_type_0_init(Saw_ptr1__ctx_type_0 &_output_);

static_inline void Saw_ptr1_process_init(Saw_ptr1__ctx_type_0 &_output_){
   Saw_ptr1__ctx_type_0_init(_output_);
   return ;
}

float Saw_ptr1_process(Saw_ptr1__ctx_type_0 &_ctx, float cv);

typedef Saw_ptr1__ctx_type_0 Saw_ptr1_noteOn_type;

static_inline void Saw_ptr1_noteOn_init(Saw_ptr1__ctx_type_0 &_output_){
   Saw_ptr1__ctx_type_0_init(_output_);
   return ;
}

static_inline void Saw_ptr1_noteOn(Saw_ptr1__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

typedef Saw_ptr1__ctx_type_0 Saw_ptr1_noteOff_type;

static_inline void Saw_ptr1_noteOff_init(Saw_ptr1__ctx_type_0 &_output_){
   Saw_ptr1__ctx_type_0_init(_output_);
   return ;
}

static_inline void Saw_ptr1_noteOff(Saw_ptr1__ctx_type_0 &_ctx, int note, int channel){
}

typedef Saw_ptr1__ctx_type_0 Saw_ptr1_controlChange_type;

static_inline void Saw_ptr1_controlChange_init(Saw_ptr1__ctx_type_0 &_output_){
   Saw_ptr1__ctx_type_0_init(_output_);
   return ;
}

static_inline void Saw_ptr1_controlChange(Saw_ptr1__ctx_type_0 &_ctx, int control, int value, int channel){
}

typedef Saw_ptr1__ctx_type_0 Saw_ptr1_default_type;

static_inline void Saw_ptr1_default_init(Saw_ptr1__ctx_type_0 &_output_){
   Saw_ptr1__ctx_type_0_init(_output_);
   return ;
}

static_inline void Saw_ptr1_default(Saw_ptr1__ctx_type_0 &_ctx){
   _ctx.rate = 0.000741569062643f;
};

float Fold_do(float signal, float level);

static_inline float Fold_process(float signal, float level){
   return Fold_do(signal,level);
};

static_inline void Fold_noteOn(int note, int velocity, int channel){
}

static_inline void Fold_noteOff(int note, int channel){
}

static_inline void Fold_controlChange(int control, int value, int channel){
}

static_inline void Fold_default(){
}

typedef struct Phd__ctx_type_0 {
   float pre_phase1;
   Phase__ctx_type_0 _inst3cd;
   Util__ctx_type_4 _inst255;
   Phase__ctx_type_0 _inst1cd;
} Phd__ctx_type_0;

typedef Phd__ctx_type_0 Phd_process_type;

void Phd__ctx_type_0_init(Phd__ctx_type_0 &_output_);

static_inline void Phd_process_init(Phd__ctx_type_0 &_output_){
   Phd__ctx_type_0_init(_output_);
   return ;
}

float Phd_process(Phd__ctx_type_0 &_ctx, float cv, float detune);

typedef Phd__ctx_type_0 Phd_noteOn_type;

static_inline void Phd_noteOn_init(Phd__ctx_type_0 &_output_){
   Phd__ctx_type_0_init(_output_);
   return ;
}

static_inline void Phd_noteOn(Phd__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

typedef Phd__ctx_type_0 Phd_noteOff_type;

static_inline void Phd_noteOff_init(Phd__ctx_type_0 &_output_){
   Phd__ctx_type_0_init(_output_);
   return ;
}

static_inline void Phd_noteOff(Phd__ctx_type_0 &_ctx, int note, int channel){
}

typedef Phd__ctx_type_0 Phd_controlChange_type;

static_inline void Phd_controlChange_init(Phd__ctx_type_0 &_output_){
   Phd__ctx_type_0_init(_output_);
   return ;
}

static_inline void Phd_controlChange(Phd__ctx_type_0 &_ctx, int control, int value, int channel){
}

typedef Phd__ctx_type_0 Phd_default_type;

static_inline void Phd_default_init(Phd__ctx_type_0 &_output_){
   Phd__ctx_type_0_init(_output_);
   return ;
}

static_inline void Phd_default(Phd__ctx_type_0 &_ctx){
}

typedef struct Lfo__ctx_type_0 {
   float x4;
   float x3;
   float x2;
} Lfo__ctx_type_0;

typedef Lfo__ctx_type_0 Lfo_soft_type;

void Lfo__ctx_type_0_init(Lfo__ctx_type_0 &_output_);

static_inline void Lfo_soft_init(Lfo__ctx_type_0 &_output_){
   Lfo__ctx_type_0_init(_output_);
   return ;
}

float Lfo_soft(Lfo__ctx_type_0 &_ctx, float x1);

typedef struct Lfo__ctx_type_1 {
   float rate;
   float phase;
   Lfo__ctx_type_0 _inst59b;
   Util__ctx_type_0 _inst351;
   Util__ctx_type_1 _inst13b;
} Lfo__ctx_type_1;

typedef Lfo__ctx_type_1 Lfo_process_type;

void Lfo__ctx_type_1_init(Lfo__ctx_type_1 &_output_);

static_inline void Lfo_process_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

float Lfo_process(Lfo__ctx_type_1 &_ctx, float cv, float shape, float reset);

typedef Lfo__ctx_type_1 Lfo_noteOn_type;

static_inline void Lfo_noteOn_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

static_inline void Lfo_noteOn(Lfo__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

typedef Lfo__ctx_type_1 Lfo_noteOff_type;

static_inline void Lfo_noteOff_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

static_inline void Lfo_noteOff(Lfo__ctx_type_1 &_ctx, int note, int channel){
}

typedef Lfo__ctx_type_1 Lfo_controlChange_type;

static_inline void Lfo_controlChange_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

static_inline void Lfo_controlChange(Lfo__ctx_type_1 &_ctx, int control, int value, int channel){
}

typedef Lfo__ctx_type_1 Lfo_default_type;

static_inline void Lfo_default_init(Lfo__ctx_type_1 &_output_){
   Lfo__ctx_type_1_init(_output_);
   return ;
}

static_inline void Lfo_default(Lfo__ctx_type_1 &_ctx){
}

typedef struct Saw_eptr__ctx_type_0 {
   float rate;
   float phase;
   Util__ctx_type_1 _inst13b;
} Saw_eptr__ctx_type_0;

typedef Saw_eptr__ctx_type_0 Saw_eptr_process_type;

void Saw_eptr__ctx_type_0_init(Saw_eptr__ctx_type_0 &_output_);

static_inline void Saw_eptr_process_init(Saw_eptr__ctx_type_0 &_output_){
   Saw_eptr__ctx_type_0_init(_output_);
   return ;
}

float Saw_eptr_process(Saw_eptr__ctx_type_0 &_ctx, float cv);

typedef Saw_eptr__ctx_type_0 Saw_eptr_noteOn_type;

static_inline void Saw_eptr_noteOn_init(Saw_eptr__ctx_type_0 &_output_){
   Saw_eptr__ctx_type_0_init(_output_);
   return ;
}

static_inline void Saw_eptr_noteOn(Saw_eptr__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

typedef Saw_eptr__ctx_type_0 Saw_eptr_noteOff_type;

static_inline void Saw_eptr_noteOff_init(Saw_eptr__ctx_type_0 &_output_){
   Saw_eptr__ctx_type_0_init(_output_);
   return ;
}

static_inline void Saw_eptr_noteOff(Saw_eptr__ctx_type_0 &_ctx, int note, int channel){
}

typedef Saw_eptr__ctx_type_0 Saw_eptr_controlChange_type;

static_inline void Saw_eptr_controlChange_init(Saw_eptr__ctx_type_0 &_output_){
   Saw_eptr__ctx_type_0_init(_output_);
   return ;
}

static_inline void Saw_eptr_controlChange(Saw_eptr__ctx_type_0 &_ctx, int control, int value, int channel){
}

typedef Saw_eptr__ctx_type_0 Saw_eptr_default_type;

static_inline void Saw_eptr_default_init(Saw_eptr__ctx_type_0 &_output_){
   Saw_eptr__ctx_type_0_init(_output_);
   return ;
}

static_inline void Saw_eptr_default(Saw_eptr__ctx_type_0 &_ctx){
   _ctx.rate = 0.000741569062643f;
};

static_inline float Polycv_velToCV(int vel){
   return (0.00787401574803f * int_to_float(vel));
};

float Polycv_velToGate(int vel);

typedef struct Polycv__ctx_type_2 {
   int vel[4];
   float polyState_ret_9;
   float polyState_ret_8;
   float polyState_ret_7;
   float polyState_ret_6;
   float polyState_ret_5;
   float polyState_ret_4;
   float polyState_ret_3;
   float polyState_ret_2;
   float polyState_ret_11;
   float polyState_ret_10;
   float polyState_ret_1;
   float polyState_ret_0;
   int notes[4];
} Polycv__ctx_type_2;

typedef Polycv__ctx_type_2 Polycv_poly_noteOn_type;

void Polycv__ctx_type_2_init(Polycv__ctx_type_2 &_output_);

static_inline void Polycv_poly_noteOn_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

void Polycv_poly_noteOn(Polycv__ctx_type_2 &_ctx, int note, int velocity);

typedef Polycv__ctx_type_2 Polycv_poly_noteOff_type;

static_inline void Polycv_poly_noteOff_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

void Polycv_poly_noteOff(Polycv__ctx_type_2 &_ctx, int note);

typedef Polycv__ctx_type_2 Polycv_polyState_type;

static_inline void Polycv_polyState_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

void Polycv_polyState(Polycv__ctx_type_2 &_ctx);

typedef Polycv__ctx_type_2 Polycv_polyState_ret_0_type;

static_inline void Polycv_polyState_ret_0_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

static_inline float Polycv_polyState_ret_0(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_0;
};

typedef Polycv__ctx_type_2 Polycv_polyState_ret_1_type;

static_inline void Polycv_polyState_ret_1_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

static_inline float Polycv_polyState_ret_1(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_1;
};

typedef Polycv__ctx_type_2 Polycv_polyState_ret_2_type;

static_inline void Polycv_polyState_ret_2_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

static_inline float Polycv_polyState_ret_2(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_2;
};

typedef Polycv__ctx_type_2 Polycv_polyState_ret_3_type;

static_inline void Polycv_polyState_ret_3_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

static_inline float Polycv_polyState_ret_3(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_3;
};

typedef Polycv__ctx_type_2 Polycv_polyState_ret_4_type;

static_inline void Polycv_polyState_ret_4_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

static_inline float Polycv_polyState_ret_4(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_4;
};

typedef Polycv__ctx_type_2 Polycv_polyState_ret_5_type;

static_inline void Polycv_polyState_ret_5_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

static_inline float Polycv_polyState_ret_5(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_5;
};

typedef Polycv__ctx_type_2 Polycv_polyState_ret_6_type;

static_inline void Polycv_polyState_ret_6_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

static_inline float Polycv_polyState_ret_6(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_6;
};

typedef Polycv__ctx_type_2 Polycv_polyState_ret_7_type;

static_inline void Polycv_polyState_ret_7_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

static_inline float Polycv_polyState_ret_7(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_7;
};

typedef Polycv__ctx_type_2 Polycv_polyState_ret_8_type;

static_inline void Polycv_polyState_ret_8_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

static_inline float Polycv_polyState_ret_8(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_8;
};

typedef Polycv__ctx_type_2 Polycv_polyState_ret_9_type;

static_inline void Polycv_polyState_ret_9_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

static_inline float Polycv_polyState_ret_9(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_9;
};

typedef Polycv__ctx_type_2 Polycv_polyState_ret_10_type;

static_inline void Polycv_polyState_ret_10_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

static_inline float Polycv_polyState_ret_10(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_10;
};

typedef Polycv__ctx_type_2 Polycv_polyState_ret_11_type;

static_inline void Polycv_polyState_ret_11_init(Polycv__ctx_type_2 &_output_){
   Polycv__ctx_type_2_init(_output_);
   return ;
}

static_inline float Polycv_polyState_ret_11(Polycv__ctx_type_2 &_ctx){
   return _ctx.polyState_ret_11;
};

typedef struct Polycv__ctx_type_3 {
   float process_ret_9;
   float process_ret_8;
   float process_ret_7;
   float process_ret_6;
   float process_ret_5;
   float process_ret_4;
   float process_ret_3;
   float process_ret_2;
   float process_ret_11;
   float process_ret_10;
   float process_ret_1;
   float process_ret_0;
   Polycv__ctx_type_2 poly;
   int channel_in;
} Polycv__ctx_type_3;

typedef Polycv__ctx_type_3 Polycv_process_type;

void Polycv__ctx_type_3_init(Polycv__ctx_type_3 &_output_);

static_inline void Polycv_process_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

void Polycv_process(Polycv__ctx_type_3 &_ctx, int c);

typedef Polycv__ctx_type_3 Polycv_process_ret_0_type;

static_inline void Polycv_process_ret_0_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

static_inline float Polycv_process_ret_0(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_0;
};

typedef Polycv__ctx_type_3 Polycv_process_ret_1_type;

static_inline void Polycv_process_ret_1_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

static_inline float Polycv_process_ret_1(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_1;
};

typedef Polycv__ctx_type_3 Polycv_process_ret_2_type;

static_inline void Polycv_process_ret_2_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

static_inline float Polycv_process_ret_2(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_2;
};

typedef Polycv__ctx_type_3 Polycv_process_ret_3_type;

static_inline void Polycv_process_ret_3_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

static_inline float Polycv_process_ret_3(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_3;
};

typedef Polycv__ctx_type_3 Polycv_process_ret_4_type;

static_inline void Polycv_process_ret_4_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

static_inline float Polycv_process_ret_4(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_4;
};

typedef Polycv__ctx_type_3 Polycv_process_ret_5_type;

static_inline void Polycv_process_ret_5_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

static_inline float Polycv_process_ret_5(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_5;
};

typedef Polycv__ctx_type_3 Polycv_process_ret_6_type;

static_inline void Polycv_process_ret_6_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

static_inline float Polycv_process_ret_6(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_6;
};

typedef Polycv__ctx_type_3 Polycv_process_ret_7_type;

static_inline void Polycv_process_ret_7_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

static_inline float Polycv_process_ret_7(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_7;
};

typedef Polycv__ctx_type_3 Polycv_process_ret_8_type;

static_inline void Polycv_process_ret_8_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

static_inline float Polycv_process_ret_8(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_8;
};

typedef Polycv__ctx_type_3 Polycv_process_ret_9_type;

static_inline void Polycv_process_ret_9_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

static_inline float Polycv_process_ret_9(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_9;
};

typedef Polycv__ctx_type_3 Polycv_process_ret_10_type;

static_inline void Polycv_process_ret_10_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

static_inline float Polycv_process_ret_10(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_10;
};

typedef Polycv__ctx_type_3 Polycv_process_ret_11_type;

static_inline void Polycv_process_ret_11_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

static_inline float Polycv_process_ret_11(Polycv__ctx_type_3 &_ctx){
   return _ctx.process_ret_11;
};

typedef Polycv__ctx_type_3 Polycv_noteOn_type;

static_inline void Polycv_noteOn_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

static_inline void Polycv_noteOn(Polycv__ctx_type_3 &_ctx, int note, int velocity, int channel){
   if(_ctx.channel_in == channel){
      if(velocity > 0){
         Polycv_poly_noteOn(_ctx.poly,note,velocity);
      }
      else
      {
         Polycv_poly_noteOff(_ctx.poly,note);
      }
   }
};

typedef Polycv__ctx_type_3 Polycv_noteOff_type;

static_inline void Polycv_noteOff_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

static_inline void Polycv_noteOff(Polycv__ctx_type_3 &_ctx, int note, int channel){
   if(_ctx.channel_in == channel){
      Polycv_poly_noteOff(_ctx.poly,note);
   }
};

typedef Polycv__ctx_type_3 Polycv_controlChange_type;

static_inline void Polycv_controlChange_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

static_inline void Polycv_controlChange(Polycv__ctx_type_3 &_ctx, int control, int value, int channel){
}

typedef Polycv__ctx_type_3 Polycv_default_type;

static_inline void Polycv_default_init(Polycv__ctx_type_3 &_output_){
   Polycv__ctx_type_3_init(_output_);
   return ;
}

static_inline void Polycv_default(Polycv__ctx_type_3 &_ctx){
}

typedef struct Sine__ctx_type_0 {
   uint8_t trig;
   Phase__ctx_type_0 p;
   Util__ctx_type_0 _inst151;
} Sine__ctx_type_0;

typedef Sine__ctx_type_0 Sine_process_type;

void Sine__ctx_type_0_init(Sine__ctx_type_0 &_output_);

static_inline void Sine_process_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0_init(_output_);
   return ;
}

float Sine_process(Sine__ctx_type_0 &_ctx, float cv, float reset);

typedef Sine__ctx_type_0 Sine_noteOn_type;

static_inline void Sine_noteOn_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0_init(_output_);
   return ;
}

static_inline void Sine_noteOn(Sine__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

typedef Sine__ctx_type_0 Sine_noteOff_type;

static_inline void Sine_noteOff_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0_init(_output_);
   return ;
}

static_inline void Sine_noteOff(Sine__ctx_type_0 &_ctx, int note, int channel){
}

typedef Sine__ctx_type_0 Sine_controlChange_type;

static_inline void Sine_controlChange_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0_init(_output_);
   return ;
}

static_inline void Sine_controlChange(Sine__ctx_type_0 &_ctx, int control, int value, int channel){
}

typedef Sine__ctx_type_0 Sine_default_type;

static_inline void Sine_default_init(Sine__ctx_type_0 &_output_){
   Sine__ctx_type_0_init(_output_);
   return ;
}

static_inline void Sine_default(Sine__ctx_type_0 &_ctx){
}



#endif // VULT_LIB4TBD_H
