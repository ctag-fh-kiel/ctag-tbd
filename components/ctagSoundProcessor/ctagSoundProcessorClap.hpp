#include <atomic>
#include "ctagSoundProcessor.hpp"
#include "stmlib/dsp/filter.h"
#include "stmlib/utils/random.h"
#include "helpers/ctagADEnv.hpp"
#include "helpers/ctagTimer.hpp"
#include "helpers/ctagSineSource.hpp"

namespace CTAG {
    namespace SP {
        class ctagSoundProcessorClap : public ctagSoundProcessor {
        public:
            virtual void Process(const ProcessData &) override;
            // no ctor, use Init() instead, is called from factory after successful creation
            virtual void Init(std::size_t blockSize, void *blockPtr) override;
            virtual ~ctagSoundProcessorClap();

        private:
            virtual void knowYourself() override;

            bool previous_trigger = false;

            float phase[3] = {0.0f, 0.0f, 0.0f};
            float dcy[3] = {0.0f, 0.0f, 0.0f};
            CTAG::SP::HELPERS::ctagADEnv env[3];
            stmlib::Svf svf;


            // private attributes could go here
            // autogenerated code here
            // sectionHpp
	atomic<int32_t> trg, trig_trg;
	atomic<int32_t> decay, cv_decay;
	atomic<int32_t> tone, cv_tone;
	atomic<int32_t> t_p1, cv_t_p1;
	atomic<int32_t> t_p2, cv_t_p2;
	atomic<int32_t> t_p3, cv_t_p3;
	// sectionHpp
        };
    }
}