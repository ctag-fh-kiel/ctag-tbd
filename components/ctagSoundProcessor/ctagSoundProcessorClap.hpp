#include <atomic>
#include "ctagSoundProcessor.hpp"
#include "stmlib/dsp/filter.h"
#include "stmlib/utils/random.h"
#include "helpers/ctagADEnv.hpp"
#include "helpers/ctagTimer.hpp"

namespace CTAG {
    namespace SP {
        class ctagSoundProcessorClap : public ctagSoundProcessor {
        public:
            virtual void Process(const ProcessData &) override;
            // no ctor, use Init() instead, is called from factory after successful creation
            virtual void Init(std::size_t blockSize, void *blockPtr) override;
            virtual ~ctagSoundProcessorClap();

        private:
            virtual void knowYourself() override;

            stmlib::Svf svf1, svf2;
            CTAG::SP::HELPERS::ctagADEnv env1;
            CTAG::SP::HELPERS::ctagADEnv env2;
            CTAG::SP::HELPERS::ctagTimer timers[4];

            bool previous_trigger = false;

            float a1 {1.f}, a2 {1.f};
            int iTransient;
            // transients
            const float delays[16][4] {
                {10.f, 20.f, 30.f, 40.f},
                {20.f, 30.f, 40.f, 60.f},
                {20.f, 40.f, 60.f, 80.f},
                {10.f, 25.f, 40.f, 60.f},
                {30.f, 45.f, 60.f, 90.f},
                {10.f, 20.f, 35.f, 60.f},
                {15.f, 30.f, 50.f, 65.f},
                {10.f, 20.f, 40.f, 80.f},
                {10.f, 20.f, 60.f, 70.f},
                {15.f, 30.f, 45.f, 60.f},
                {40.f, 80.f, 90.f, 110.f},
                {30.f, 40.f, 70.f, 75.f},
                {5.f, 30.f, 40.f, 50.f},
                {15.f, 45.f, 55.f, 65.f},
                {15.f, 20.f, 35.f, 40.f},
                {10.f, 40.f, 50.f, 70.f}
            };

            const float amplitudes[16][4] {
                {1.f, 1.f, 1.f, 0.1f},
                {1.f, .5f, 1.f, 0.1f},
                {1.f, .5f, 1.f, 0.1f},
                {.5f, 1.f, 1.f, 0.1f},
                {1.f, .1f, 1.f, 0.1f},
                {1.f, .5f, .5f, 0.2f},
                {1.f, .2f, .2f, 0.5f},
                {.25f, .5f, 1.f, 0.2f},
                {.25f, 1.f, .25f, 0.5f},
                {1.f, .5f, .25f, 0.5f},
                {1.f, .2f, 1.f, 0.2f},
                {0.25f, .5f, .25f, 1.f},
                {.5f, 1.f, 0.25f, 0.1f},
                {.5f, .1f, 1.f, 0.25f},
                {1.f, .1f, 1.f, 0.2f},
                {1.f, .5f, 1.f, 0.2f}
            };

            // private attributes could go here
            // autogenerated code here
            // sectionHpp
	atomic<int32_t> trg, trig_trg;
	atomic<int32_t> decay, cv_decay;
	atomic<int32_t> tone, cv_tone;
	atomic<int32_t> t_p1, cv_t_p1;
	atomic<int32_t> t_p2, cv_t_p2;
	atomic<int32_t> t_p3, cv_t_p3;
	// sectionHpp
        };
    }
}