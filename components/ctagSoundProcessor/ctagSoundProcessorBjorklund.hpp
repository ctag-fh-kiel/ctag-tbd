#include <atomic>
#include "ctagSoundProcessor.hpp"
#include "helpers/ctagSineSource.hpp"

// --- VULT "Library for TBD" ---
#include "../vult/vult_lib4tbd.h"
#include "../vult/vult_lib4tbd.tables.h"
#include "../vult/vultin.h"


using namespace CTAG::SP::HELPERS;

namespace CTAG {
    namespace SP {
        class ctagSoundProcessorBjorklund : public ctagSoundProcessor {
        public:
            virtual void Process(const ProcessData &) override;
            ctagSoundProcessorBjorklund();
            virtual ~ctagSoundProcessorBjorklund();

        private:
            virtual void knowYourself() override;

            // --- Remember status of triggers / buttons ---
            inline int process_param_trig( const ProcessData &data, int trig_myparm, int my_parm, int prev_trig_state_id ); // rescale incoming data to bool
            enum trig_states
            {
                e_Saturate,e_Bjorklund_options_max
            };
            int prev_trig_state[e_Bjorklund_options_max] = {0};   // Initialize _all_ entries with "low value"

            ctagSineSource sineOsc;
            Ladder__ctx_type_6 ladder_euler;    // VULT data-type
            Phasedist_process_type pd_data;        // VULT PD synth voice

            // private attributes could go here
            // autogenerated code here
            // sectionHpp
	atomic<int32_t> Run, trig_Run;
	atomic<int32_t> MasterPitch, cv_MasterPitch;
	atomic<int32_t> Volume, cv_Volume;
	atomic<int32_t> Bank, cv_Bank;
	atomic<int32_t> Slice, cv_Slice;
	atomic<int32_t> Speed, cv_Speed;
	atomic<int32_t> Tune, cv_Tune;
	atomic<int32_t> Cutoff, cv_Cutoff;
	atomic<int32_t> Resonance, cv_Resonance;
	atomic<int32_t> Saturate, trig_Saturate;
	// sectionHpp
        };
    }
}