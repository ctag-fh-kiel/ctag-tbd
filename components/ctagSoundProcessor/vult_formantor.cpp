
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "vult_formantor.h"

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.y1 = 0.0f;
   _ctx.x1 = 0.0f;
   _output_ = _ctx;
   return ;
}

float Util_dcblock(Util__ctx_type_3 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (0.995f * _ctx.y1));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Rescomb__ctx_type_0_init(Rescomb__ctx_type_0 &_output_){
   Rescomb__ctx_type_0 _ctx;
   _ctx.write_pos = 0;
   float_init_array(675,0.0f,_ctx.buffer);
   _output_ = _ctx;
   return ;
}

float Rescomb_delay(Rescomb__ctx_type_0 &_ctx, float x, float cv){
   _ctx.write_pos = ((1 + _ctx.write_pos) % 675);
   float_set(_ctx.buffer,_ctx.write_pos,x);
   float r_size;
   r_size = 675.f;
   float r_index;
   r_index = fmodf((int_to_float(_ctx.write_pos) + (- Util_cvToperiod(cv))),r_size);
   if(r_index < 0.0f){
      r_index = (r_index + r_size);
   }
   int t1;
   t1 = (float_to_int(floorf(r_index)) % 675);
   int t2;
   t2 = ((1 + t1) % 675);
   float decimal;
   decimal = (r_index + (- int_to_float(t1)));
   float x1;
   x1 = float_get(_ctx.buffer,t1);
   float x2;
   x2 = float_get(_ctx.buffer,t2);
   float ret;
   ret = (x1 + (decimal * (x2 + (- x1))));
   return ret;
}

void Rescomb__ctx_type_5_init(Rescomb__ctx_type_5 &_output_){
   Rescomb__ctx_type_5 _ctx;
   _ctx.stone = 0.0f;
   _ctx.output = 0.0f;
   Rescomb__ctx_type_0_init(_ctx._inst47a);
   Util__ctx_type_3_init(_ctx._inst37d);
   Util__ctx_type_1_init(_ctx._inst13b);
   _output_ = _ctx;
   return ;
}

float Rescomb_do(Rescomb__ctx_type_5 &_ctx, float in, float cv, float tone, float res){
   if(Util_change(_ctx._inst13b,tone)){
      _ctx.stone = Rescomb_toneCurve(tone);
   }
   float feedback;
   feedback = Util_dcblock(_ctx._inst37d,(_ctx.output * res));
   float saturated_input;
   saturated_input = Saturate_soft_process((feedback + in));
   _ctx.output = (in + (_ctx.stone * Rescomb_delay(_ctx._inst47a,saturated_input,cv)));
   return Saturate_soft_process(_ctx.output);
}

void Phasedist_real__ctx_type_2_init(Phasedist_real__ctx_type_2 &_output_){
   Phasedist_real__ctx_type_2 _ctx;
   _ctx.rate = 0.0f;
   _ctx.phase = 0.0f;
   Phasedist_real__ctx_type_0_init(_ctx._inst12a);
   _output_ = _ctx;
   return ;
}

float Phasedist_real_phasor(Phasedist_real__ctx_type_2 &_ctx, float pitch, uint8_t reset){
   if(Phasedist_real_change(_ctx._inst12a,pitch)){
      _ctx.rate = Phasedist_real_pitchToRate(pitch);
   }
   if(reset){
      _ctx.phase = 0.0f;
   }
   else
   {
      _ctx.phase = fmodf((_ctx.phase + _ctx.rate),1.f);
   }
   return _ctx.phase;
}

void Phasedist_real__ctx_type_3_init(Phasedist_real__ctx_type_3 &_output_){
   Phasedist_real__ctx_type_3 _ctx;
   _ctx.pre_phase1 = 0.0f;
   _ctx.pitch = 0.0f;
   _ctx.detune = 0.0f;
   Phasedist_real__ctx_type_2_init(_ctx._inst2bf);
   Phasedist_real__ctx_type_2_init(_ctx._inst1bf);
   _output_ = _ctx;
   return ;
}

float Phasedist_real_process(Phasedist_real__ctx_type_3 &_ctx, float input){
   float phase1;
   phase1 = Phasedist_real_phasor(_ctx._inst1bf,_ctx.pitch,false);
   float comp;
   comp = (1.f + (- phase1));
   uint8_t reset;
   reset = ((_ctx.pre_phase1 + (- phase1)) > 0.5f);
   _ctx.pre_phase1 = phase1;
   float phase2;
   phase2 = Phasedist_real_phasor(_ctx._inst2bf,(_ctx.pitch + (32.f * _ctx.detune)),reset);
   float sine;
   sine = sinf((6.28318530718f * phase2));
   return (comp * sine);
}


