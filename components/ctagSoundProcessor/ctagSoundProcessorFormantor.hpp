#include <atomic>
#include "ctagSoundProcessor.hpp"
#include "helpers/ctagADEnv.hpp"            // Needed for AD EG (Attack/Decay Envelope Generator)
#include "helpers/ctagADSREnv.hpp"          // Needed for ADSR EG (Attack/Decay/Sustain/Release Envelope Generator)


// --- VULT "Library for TBD" ---
#include "vult_formantor.h"
#include "vult_formantor.tables.h"
#include "vultin.h"


using namespace CTAG::SP::HELPERS;

namespace CTAG {
    namespace SP {
        class ctagSoundProcessorFormantor : public ctagSoundProcessor {
        public:
            virtual void Process(const ProcessData &) override;
            ctagSoundProcessorFormantor();
            virtual ~ctagSoundProcessorFormantor();

        private:
            virtual void knowYourself() override;

            // --- Vowel/formant filter ---
            int i_FormantSelect_save = 0;         // This is a buffer variable in case we allow switching of formants only on note-change

            // --- Keyboard logic[s] to switch formants ---
            int formant_trigger[12] = {-1,0,-1,1,-1,-1,2,-1,3,-1,4,-1};   // Black keys on a keyboard
            int formant_selected = 0;   // We remember the most recent trigger-key of the formant here
            int note_save = 0;          // We remember the last note, in case we select formants via black keys...

            // --- Remember status of triggers / buttons ---
            inline int process_param_trig( const ProcessData &data, int trig_myparm, int my_parm, int prev_trig_state_id ); // rescale incoming data to bool
            enum trig_states
            {
                e_Gate, e_EGvolActive, e_EGvolSlow, e_FormantBlendingOn, e_FormantFilterOn, e_BlackKeyLogic, e_FormantLock, e_ADSRon, e_Formantor_options_max
            };
            int prev_trig_state[e_Formantor_options_max] = {0};   // Initialize _all_ entries with "low value"

            // --- VULT Stuff ---
            Phasedist_real_process_type pd_data;        // VULT PD synth voice internal datastructure, also needed for initialisation
            Rescomb__ctx_type_6 rescomb_data;           // VULT Rescomb filter internal datastructure, also needed for initialisation

            // --- Volume EG --
            ctagADEnv vol_eg_ad;
            ctagADSREnv vol_eg_adsr;

            // private attributes could go here
            // autogenerated code here
            // sectionHpp
	atomic<int32_t> Gate, trig_Gate;
	atomic<int32_t> MasterPitch, cv_MasterPitch;
	atomic<int32_t> Volume, cv_Volume;
	atomic<int32_t> PDamount, cv_PDamount;
	atomic<int32_t> FormantFilterOn, trig_FormantFilterOn;
	atomic<int32_t> BlackKeyLogic, trig_BlackKeyLogic;
	atomic<int32_t> FormantLock, trig_FormantLock;
	atomic<int32_t> FormantSelect, cv_FormantSelect;
	atomic<int32_t> TremoloActive, trig_TremoloActive;
	atomic<int32_t> TremoloAfterFormant, trig_TremoloAfterFormant;
	atomic<int32_t> TremoloAttack, cv_TremoloAttack;
	atomic<int32_t> TremoloSpeed, cv_TremoloSpeed;
	atomic<int32_t> TremoloAmount, cv_TremoloAmount;
	atomic<int32_t> EGvolActive, trig_EGvolActive;
	atomic<int32_t> EGvolSlow, trig_EGvolSlow;
	atomic<int32_t> Attack, cv_Attack;
	atomic<int32_t> Decay, cv_Decay;
	atomic<int32_t> ADSRon, trig_ADSRon;
	atomic<int32_t> Sustain, cv_Sustain;
	atomic<int32_t> Release, cv_Release;
	// sectionHpp
        };
    }
}