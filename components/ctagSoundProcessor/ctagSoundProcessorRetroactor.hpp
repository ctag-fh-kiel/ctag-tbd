#include <atomic>
#include "ctagSoundProcessor.hpp"
#include "helpers/ctagSineSource.hpp"
#include "helpers/ctagFastMath.hpp"

// --- VULT "Library for TBD" ---
#include "./vult/vult_formantor.h"
#include "./vult/vult_formantor.tables.h"

using namespace CTAG::SP::HELPERS;

namespace CTAG {
    namespace SP {
        class ctagSoundProcessorRetroactor : public ctagSoundProcessor {
        public:
            virtual void Process(const ProcessData &) override;
            ctagSoundProcessorRetroactor();
            virtual ~ctagSoundProcessorRetroactor();

        private:
            virtual void knowYourself() override;

            // --- Remember status of triggers / buttons ---
            inline int process_param_trig( const ProcessData &data, int trig_myparm, int my_parm, int prev_trig_state_id, int gate_type ); // rescale incoming data to bool
            enum trig_states
            {
                e_VintageFilter, e_ResetFeedbackLoop, e_IsolateFeedback, e_SineDisable, e_Retroactor_options_max
            };
            int prev_trig_state[e_Retroactor_options_max] = {0};   // Initialize _all_ entries with "low value"
            bool low_reached[e_Retroactor_options_max] = {false};  // We need this for look for toggle-events

            // --- Oscillators ---
            ctagSineSource sine_A;
            ctagSineSource sine_B;

            // --- Feedback Loop ---
            float m_feedback_process = 0;
            float m_wavefolder = 0;

            // --- VULT Stuff ---
            Rescomb__ctx_type_6 rescomb_data;           // Resonator (comb-filter) data-structure
            Ladder__ctx_type_8 ladder_data;             // Ladder filter data-structure
            Ladder__ctx_type_6 ladder_vintage_data;     // Euler ladder algorithm

            // private attributes could go here
            // autogenerated code here
            // sectionHpp
	atomic<int32_t> MasterPitch, cv_MasterPitch;
	atomic<int32_t> MasterTune, cv_MasterTune;
	atomic<int32_t> Volume, cv_Volume;
	atomic<int32_t> PitchSineA, cv_PitchSineA;
	atomic<int32_t> FrequSineA, cv_FrequSineA;
	atomic<int32_t> PitchSineB, cv_PitchSineB;
	atomic<int32_t> FrequSineB, cv_FrequSineB;
	atomic<int32_t> ResetFeedbackLoop, trig_ResetFeedbackLoop;
	atomic<int32_t> CombCut, cv_CombCut;
	atomic<int32_t> CombRes, cv_CombRes;
	atomic<int32_t> CombTone, cv_CombTone;
	atomic<int32_t> LadderCut, cv_LadderCut;
	atomic<int32_t> LadderRes, cv_LadderRes;
	atomic<int32_t> VintageFilter, trig_VintageFilter;
	atomic<int32_t> WavefolderAmount, cv_WavefolderAmount;
	atomic<int32_t> IsolateFeedback, trig_IsolateFeedback;
	atomic<int32_t> SineDisable, trig_SineDisable;
	atomic<int32_t> VolSineBoost, cv_VolSineBoost;
	atomic<int32_t> VolSineA, cv_VolSineA;
	atomic<int32_t> VolSineB, cv_VolSineB;
	atomic<int32_t> SineMix, cv_SineMix;
	atomic<int32_t> VolFeedbackLoop, cv_VolFeedbackLoop;
	atomic<int32_t> VolWavefolder, cv_VolWavefolder;
	// sectionHpp
        };
    }
}