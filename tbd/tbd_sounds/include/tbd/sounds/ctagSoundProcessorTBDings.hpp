/***************
CTAG TBD >>to be determined<< is an open source eurorack synthesizer module.

A project conceived within the Creative Technologies Arbeitsgruppe of
Kiel University of Applied Sciences: https://www.creative-technologies.de

(c) 2020 by Robert Manzke. All rights reserved.

The CTAG TBD software is licensed under the GNU General Public License
(GPL 3.0), available here: https://www.gnu.org/licenses/gpl-3.0.txt

The CTAG TBD hardware design is released under the Creative Commons
Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0).
Details here: https://creativecommons.org/licenses/by-nc-sa/4.0/

CTAG TBD is provided "as is" without any express or implied warranties.

License and copyright details for specific submodules are included in their
respective component folders / files if different from this license.
***************/

#include <atomic>
#include "ctagSoundProcessor.hpp"
#include "rings/dsp/part.h"
#include "rings/dsp/strummer.h"
#include "rings/dsp/string_synth_part.h"
#include <cstdint>
#include "helpers/ctagADEnv.hpp"

namespace CTAG {
    namespace SP {
        class ctagSoundProcessorTBDings : public ctagSoundProcessor {
        public:
            virtual void Process(const ProcessData &) override;

            virtual ~ctagSoundProcessorTBDings();

           virtual void Init(std::size_t blockSize, void *blockPtr) override;

        private:
            virtual void knowYourself() override;


            void updateParams(const ProcessData &);

            // private attributes could go here
            uint16_t *reverb_buffer;
            rings::Part part;
            rings::StringSynthPart string_synth;
            rings::Strummer strummer;
            rings::ResonatorModel resonatorModel = rings::RESONATOR_MODEL_MODAL;
            bool strum = false;
            bool lastStrum = false;

            rings::Patch patch;
            rings::PerformanceState performance_state;

            HELPERS::ctagADEnv paramAD;
            bool eg_pre_trigger = false;

            // autogenerated code here
// sectionHpp
            atomic<int32_t> reson_model, cv_reson_model;
            atomic<int32_t> frequency, cv_frequency;
            atomic<int32_t> polyphony, cv_polyphony;
            atomic<int32_t> structure, cv_structure;
            atomic<int32_t> brightness, cv_brightness;
            atomic<int32_t> damping, cv_damping;
            atomic<int32_t> position, cv_position;
            atomic<int32_t> chords, cv_chords;
            atomic<int32_t> easter, trig_easter;
            atomic<int32_t> ex_int, trig_ex_int;
            atomic<int32_t> strum_int, trig_strum_int;
            atomic<int32_t> note_int, trig_note_int;
            atomic<int32_t> eg_trigger, trig_eg_trigger;
            atomic<int32_t> eg_loop, trig_eg_loop;
            atomic<int32_t> eg_attack, cv_eg_attack;
            atomic<int32_t> eg_decay, cv_eg_decay;
            atomic<int32_t> mod_brightness, cv_mod_brightness;
            atomic<int32_t> mod_frequency, cv_mod_frequency;
            atomic<int32_t> mod_damping, cv_mod_damping;
            atomic<int32_t> mod_structure, cv_mod_structure;
            atomic<int32_t> mod_position, cv_mod_position;
            // sectionHpp

        };
    }
}