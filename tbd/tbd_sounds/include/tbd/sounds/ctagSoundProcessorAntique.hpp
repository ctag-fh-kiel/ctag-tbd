/***************
CTAG TBD >>to be determined<< is an open source eurorack synthesizer module.

A project conceived within the Creative Technologies Arbeitsgruppe of
Kiel University of Applied Sciences: https://www.creative-technologies.de
(c) 2020/2021 by Robert Manzke. All rights reserved.

(c) 2021 for the "APCpp"-Plugin by Mathias BrÃ¼ssel
APCpp stands for "Atari Punk Console plus plus", i.e. the digital implementation of a popular electronics circuit with enhancements
As with many simple Oscillators, the original hardware design is based on timerchips (two NE555 or one 556) https://de.wikipedia.org/wiki/NE555
To learn more about the original APC circuit please refer to: https://sdiy.info/wiki/Atari_Punk_Console
Enhancements are optional pitch-modulation, pulse-with-modulation, amplitude/ring-modulation, sinuswaves for the oscillators and a volume-envelope.

The CTAG TBD software is licensed under the GNU General Public License
(GPL 3.0), available here: https://www.gnu.org/licenses/gpl-3.0.txt

The CTAG TBD hardware design is released under the Creative Commons
Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0).
Details here: https://creativecommons.org/licenses/by-nc-sa/4.0/

CTAG TBD is provided "as is" without any express or implied warranties.

License and copyright details for specific submodules are included in their
respective component folders / files if different from this license.
***************/

#include <atomic>
#include <vector>
#include <tbd/sound_processor.hpp>

#include "helpers/ctagWNoiseGen.hpp"
#include "helpers/ctagSineSource.hpp"
#include "helpers/ctagDecay.hpp"
#include "helpers/ctagADEnv.hpp"
#include "braids/analog_oscillator.h"
#include "stmlib/dsp/filter.h"
#include "mifx/pitch_shifter.h"


namespace CTAG {
    namespace SP {
        class ctagSoundProcessorAntique : public ctagSoundProcessor {
        public:
            virtual void Process(const ProcessData &) override;
           virtual void Init(std::size_t blockSize, void *blockPtr) override;
            virtual ~ctagSoundProcessorAntique();

        private:
            virtual void knowYourself() override;

            HELPERS::ctagWNoiseGen rnd, hissLevelMod;
            HELPERS::ctagWNoiseGen pop1, pop2, click;
            HELPERS::ctagSineSource popSrc;
            HELPERS::ctagDecay popShaper;
            stmlib::Svf clickFilter;
            stmlib::Svf hissFlt, scrubFilt;
            braids::AnalogOscillator humm;
            mifx::PitchShifter fx;
            float *fx_buffer;
            HELPERS::ctagSineSource lfoWow, lfoFlutter, lfoPopBlend;
            stmlib::Svf lpMaster, hpMaster;

            uint32_t loopCntr;
            int32_t seed1, seed2;

            // private attributes could go here
            // autogenerated code here
            // sectionHpp
			std::atomic<int32_t> inplevel, cv_inplevel;
			std::atomic<int32_t> inpdist, cv_inpdist;
			std::atomic<int32_t> inprepitch, cv_inprepitch;
			std::atomic<int32_t> hisslevel, cv_hisslevel;
			std::atomic<int32_t> hissf, cv_hissf;
			std::atomic<int32_t> hissbw, cv_hissbw;
			std::atomic<int32_t> hissshp, cv_hissshp;
			std::atomic<int32_t> scrublev, cv_scrublev;
			std::atomic<int32_t> scrubcen, cv_scrubcen;
			std::atomic<int32_t> scrubq, cv_scrubq;
			std::atomic<int32_t> scrubmodlev, cv_scrubmodlev;
			std::atomic<int32_t> humlev, cv_humlev;
			std::atomic<int32_t> humf, cv_humf;
			std::atomic<int32_t> humshape, cv_humshape;
			std::atomic<int32_t> humagr, cv_humagr;
			std::atomic<int32_t> wowl, cv_wowl;
			std::atomic<int32_t> wowf, cv_wowf;
			std::atomic<int32_t> flutl, cv_flutl;
			std::atomic<int32_t> flutf, cv_flutf;
			std::atomic<int32_t> clickl, cv_clickl;
			std::atomic<int32_t> clickd, cv_clickd;
			std::atomic<int32_t> clickf, cv_clickf;
			std::atomic<int32_t> clickfmod, cv_clickfmod;
			std::atomic<int32_t> clickq, cv_clickq;
			std::atomic<int32_t> clickqm, cv_clickqm;
			std::atomic<int32_t> popl, cv_popl;
			std::atomic<int32_t> popd1, cv_popd1;
			std::atomic<int32_t> popd2, cv_popd2;
			std::atomic<int32_t> poplen, cv_poplen;
			std::atomic<int32_t> poplensy, trig_poplensy;
			std::atomic<int32_t> popblen, cv_popblen;
			std::atomic<int32_t> popf, cv_popf;
			std::atomic<int32_t> popdcy, cv_popdcy;
			std::atomic<int32_t> outlevel, cv_outlevel;
			std::atomic<int32_t> outdw, cv_outdw;
			std::atomic<int32_t> outfltctr, cv_outfltctr;
			std::atomic<int32_t> outfltbw, cv_outfltbw;
			std::atomic<int32_t> outfltq, cv_outfltq;
			std::atomic<int32_t> hishumpre, trig_hishumpre;
	// sectionHpp
        };
    }
}