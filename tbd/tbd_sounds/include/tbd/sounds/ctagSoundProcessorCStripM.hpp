/***************
CTAG TBD >>to be determined<< is an open source eurorack synthesizer module.

A project conceived within the Creative Technologies Arbeitsgruppe of
Kiel University of Applied Sciences: https://www.creative-technologies.de

(c) 2020 by Robert Manzke. All rights reserved.

The CTAG TBD software is licensed under the GNU General Public License
(GPL 3.0), available here: https://www.gnu.org/licenses/gpl-3.0.txt

The CTAG TBD hardware design is released under the Creative Commons
Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0).
Details here: https://creativecommons.org/licenses/by-nc-sa/4.0/

CTAG TBD is provided "as is" without any express or implied warranties.

License and copyright details for specific submodules are included in their
respective component folders / files if different from this license.
***************/

#include <atomic>
#include <tbd/sound_processor.hpp>
#include "airwindows/CStripM.hpp"


namespace CTAG {
    namespace SP {
        class ctagSoundProcessorCStripM : public ctagSoundProcessor {
        public:
            virtual void Process(const ProcessData &) override;
           virtual void Init(std::size_t blockSize, void *blockPtr) override;
            virtual ~ctagSoundProcessorCStripM();

        private:
            virtual void knowYourself() override;

            airwindows::CStripM CStripM;

            // private attributes could go here
            // autogenerated code here
            // sectionHpp
            std::atomic<int32_t> treble, cv_treble;
            std::atomic<int32_t> mid, cv_mid;
            std::atomic<int32_t> bass, cv_bass;
            std::atomic<int32_t> lowpass, cv_lowpass;
            std::atomic<int32_t> trebfreq, cv_trebfreq;
            std::atomic<int32_t> bassfreq, cv_bassfreq;
            std::atomic<int32_t> hipass, cv_hipass;
            std::atomic<int32_t> gate, cv_gate;
            std::atomic<int32_t> comp, cv_comp;
            std::atomic<int32_t> compspd, cv_compspd;
            std::atomic<int32_t> timelag, cv_timelag;
            std::atomic<int32_t> outgain, cv_outgain;
            // sectionHpp
        };
    }
}