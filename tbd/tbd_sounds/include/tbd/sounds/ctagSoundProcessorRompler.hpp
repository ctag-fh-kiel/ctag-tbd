/***************
CTAG TBD >>to be determined<< is an open source eurorack synthesizer module.

A project conceived within the Creative Technologies Arbeitsgruppe of
Kiel University of Applied Sciences: https://www.creative-technologies.de

(c) 2020 by Robert Manzke. All rights reserved.

The CTAG TBD software is licensed under the GNU General Public License
(GPL 3.0), available here: https://www.gnu.org/licenses/gpl-3.0.txt

The CTAG TBD hardware design is released under the Creative Commons
Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0).
Details here: https://creativecommons.org/licenses/by-nc-sa/4.0/

CTAG TBD is provided "as is" without any express or implied warranties.

License and copyright details for specific submodules are included in their
respective component folders / files if different from this license.
***************/

#include <atomic>
#include <tbd/sound_processor.hpp>
#include "synthesis/RomplerVoice.hpp"
#include "helpers/ctagSampleRom.hpp"
#include <memory>
#include <vector>

using namespace CTAG::SYNTHESIS;

namespace CTAG {
    namespace SP {
        class ctagSoundProcessorRompler : public ctagSoundProcessor {
        public:
            virtual void Process(const ProcessData &) override;
           virtual void Init(std::size_t blockSize, void *blockPtr) override;
            virtual ~ctagSoundProcessorRompler();

        private:
            virtual void knowYourself() override;
            RomplerVoice romplers[2];
            float out[32];
            bool preGate = false;
            bool bGate2 = false;
            bool preGateLatch = false;
            uint32_t activeVoice = 0;
            uint32_t nextVoice = 0;
            uint32_t wtSliceOffset = 0;
            HELPERS::ctagSampleRom sampleRom;
            // private attributes could go here
            // autogenerated code here
            // sectionHpp
			std::atomic<int32_t> gain, cv_gain;
			std::atomic<int32_t> brr, cv_brr;
			std::atomic<int32_t> gate, trig_gate;
			std::atomic<int32_t> latch, trig_latch;
			std::atomic<int32_t> bank, cv_bank;
			std::atomic<int32_t> slice, cv_slice;
			std::atomic<int32_t> slontrg, trig_slontrg;
			std::atomic<int32_t> skpwt, trig_skpwt;
			std::atomic<int32_t> speed, cv_speed;
			std::atomic<int32_t> pitch, cv_pitch;
			std::atomic<int32_t> tune, cv_tune;
			std::atomic<int32_t> start, cv_start;
			std::atomic<int32_t> length, cv_length;
			std::atomic<int32_t> duo, trig_duo;
			std::atomic<int32_t> loop, trig_loop;
			std::atomic<int32_t> looppipo, trig_looppipo;
			std::atomic<int32_t> lpstart, cv_lpstart;
			std::atomic<int32_t> fmode, cv_fmode;
			std::atomic<int32_t> fcut, cv_fcut;
			std::atomic<int32_t> freso, cv_freso;
			std::atomic<int32_t> lfo2am, cv_lfo2am;
			std::atomic<int32_t> lfo2fm, cv_lfo2fm;
			std::atomic<int32_t> lfo2filtfm, cv_lfo2filtfm;
			std::atomic<int32_t> eg2am, cv_eg2am;
			std::atomic<int32_t> eg2fm, cv_eg2fm;
			std::atomic<int32_t> eg2filtfm, cv_eg2filtfm;
			std::atomic<int32_t> lfospeed, cv_lfospeed;
			std::atomic<int32_t> egfasl, trig_egfasl;
			std::atomic<int32_t> attack, cv_attack;
			std::atomic<int32_t> decay, cv_decay;
			std::atomic<int32_t> sustain, cv_sustain;
			std::atomic<int32_t> release, cv_release;
			std::atomic<int32_t> egstop, trig_egstop;
			// sectionHpp
        };
    }
}