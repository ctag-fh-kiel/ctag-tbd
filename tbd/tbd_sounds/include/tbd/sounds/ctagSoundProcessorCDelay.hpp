/***************
CTAG TBD >>to be determined<< is an open source eurorack synthesizer module.

A project conceived within the Creative Technologies Arbeitsgruppe of
Kiel University of Applied Sciences: https://www.creative-technologies.de

(c) 2020 by Robert Manzke. All rights reserved.

The CTAG TBD software is licensed under the GNU General Public License
(GPL 3.0), available here: https://www.gnu.org/licenses/gpl-3.0.txt

The CTAG TBD hardware design is released under the Creative Commons
Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0).
Details here: https://creativecommons.org/licenses/by-nc-sa/4.0/

CTAG TBD is provided "as is" without any express or implied warranties.

License and copyright details for specific submodules are included in their
respective component folders / files if different from this license.
***************/

#include <atomic>
#include <tbd/sound_processor.hpp>
#include "tesselode/CocoaDelay.h"

using namespace tesselode;

namespace CTAG {
    namespace SP {
        class ctagSoundProcessorCDelay : public ctagSoundProcessor {
        public:
            virtual void Process(const ProcessData &) override;

           virtual void Init(std::size_t blockSize, void *blockPtr) override;

        private:

            virtual void knowYourself() override;

            // private attributes could go here
            CocoaDelay delay;

            // autogenerated code here
// sectionHpp
           std::atomic<int32_t> dly_time, cv_dly_time;
           std::atomic<int32_t> dly_time_bpm, cv_dly_time_bpm;
           std::atomic<int32_t> dly_sync, cv_dly_sync;
           std::atomic<int32_t> dly_feedback, cv_dly_feedback;
           std::atomic<int32_t> freeze, trig_freeze;
           std::atomic<int32_t> dly_st_ofs, cv_dly_st_ofs;
           std::atomic<int32_t> dly_pan_mode, cv_dly_pan_mode;
           std::atomic<int32_t> dly_panning, cv_dly_panning;
           std::atomic<int32_t> dly_mono, trig_dly_mono;
           std::atomic<int32_t> dly_wet, cv_dly_wet;
           std::atomic<int32_t> dly_dry, cv_dly_dry;
           std::atomic<int32_t> lfo_amt, cv_lfo_amt;
           std::atomic<int32_t> lfo_frq, cv_lfo_frq;
           std::atomic<int32_t> lfo_drift_amt, cv_lfo_drift_amt;
           std::atomic<int32_t> lfo_drift_spd, cv_lfo_drift_spd;
           std::atomic<int32_t> duck_amt, cv_duck_amt;
           std::atomic<int32_t> duck_atck, cv_duck_atck;
           std::atomic<int32_t> duck_rls, cv_duck_rls;
           std::atomic<int32_t> flt_mode, cv_flt_mode;
           std::atomic<int32_t> flt_co, cv_flt_co;
           std::atomic<int32_t> flt_reso, cv_flt_reso;
           std::atomic<int32_t> flt_lfo_freq, cv_flt_lfo_freq;
           std::atomic<int32_t> flt_lfo_amt, cv_flt_lfo_amt;
           std::atomic<int32_t> flt_mix, cv_flt_mix;
            // sectionHpp
        };
    }
}