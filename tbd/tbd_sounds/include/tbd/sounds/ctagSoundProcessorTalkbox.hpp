#include <atomic>
#include <cmath>
#include <cstdint>
#include <tbd/sound_processor.hpp>
#include "helpers/ctagWNoiseGen.hpp"
#include "helpers/ctagSineSource.hpp"
#include "helpers/ctagRollingAverage.hpp"
#include "fx/ctagMDAtalkbox.hpp"
#include "mifx/ensemble.h"
#include "mifx/chorus.h"

// --- VULT "Library for TBD" ---
#include "./vult/vult_formantor.h"
#include "./vult/vult_formantor.tables.h"

using namespace CTAG::SP::HELPERS;

namespace CTAG {
    namespace SP {
        class ctagSoundProcessorTalkbox : public ctagSoundProcessor {
        public:
            virtual void Process(const ProcessData &) override;
           virtual void Init(std::size_t blockSize, void *blockPtr) override;
            virtual ~ctagSoundProcessorTalkbox();

        private:
            virtual void knowYourself() override;

            // --- Remember status of triggers / buttons ---
            inline int process_param_trig( const ProcessData &data, int trig_myparm, int my_parm, int prev_trig_state_id, int gate_type ); // rescale incoming data to bool
            enum trig_states
            {
                e_CarrierHasEffects, e_SubOscTuningBactive, e_SubOscsActive, e_AccentBendIsActive, e_VocoderQuality,
                e_AllowExternalCarrier, e_VibratoIsActive, e_PWMactive, e_Talkbox_options_max
            };
            int prev_trig_state[e_Talkbox_options_max] = {0, 0, 0, 0, 0, 0, 0, 0};   // Initialize _all_ entries with "low value"
            bool low_reached[e_Talkbox_options_max] = {false, false, false, false, false, false, false, false};  // We need this for look for toggle-events

            // --- LFOs ---
            ctagSineSource lfoPWM;
            ctagSineSource lfoVibrato;

            // --- White Noise ---
            ctagWNoiseGen wNoise;

            // --- Talkbox ---
            ctagMDAtalkbox ctag_talkbox;
            bool m_vocoder_quality = true;    // True for HiFi, false for LoFi

            // --- Average to calculate Accent Bend (Our interpretation: Pitchbend depending on overall-volume of Talkbox signal) ---
            ctagRollingAverage averageAccentBend;
            float accentBendHyteresis = 0.f;       // Hysteresis memory variable for Amplitude MG
            float f_accentBendVal = 0.f;

            // --- VULT Stuff ---
            Blit__ctx_type_1 pulse_data;                  // Pulse oscillator data-structure
            Saw_eptr__ctx_type_0 saw_data;                // Sub oscillator data-structure

            // Ensemble
            mifx::Ensemble ens;
            mifx::Chorus chorus;
            float *fx_buffer {nullptr};

            // private attributes could go here
            // autogenerated code here
            // sectionHpp
            std::atomic<int32_t> MasterPitch, cv_MasterPitch;
            std::atomic<int32_t> MasterTune, cv_MasterTune;
            std::atomic<int32_t> CarrierAmnt, cv_CarrierAmnt;
            std::atomic<int32_t> CarrierBalance, cv_CarrierBalance;
            std::atomic<int32_t> CarrierExternalBalance, cv_CarrierExternalBalance;
            std::atomic<int32_t> CarrierLeak, cv_CarrierLeak;
            std::atomic<int32_t> ExtCarrierAmnt, cv_ExtCarrierAmnt;
            std::atomic<int32_t> AccentBendIsActive, trig_AccentBendIsActive;
            std::atomic<int32_t> AccentBend, cv_AccentBend;
            std::atomic<int32_t> ModulatorAmnt, cv_ModulatorAmnt;
            std::atomic<int32_t> ModulatorLeakage, cv_ModulatorLeakage;
            std::atomic<int32_t> Volume, cv_Volume;
            std::atomic<int32_t> VibratoIsActive, trig_VibratoIsActive;
            std::atomic<int32_t> VibratoSpeed, cv_VibratoSpeed;
            std::atomic<int32_t> VibratoDepth, cv_VibratoDepth;
            std::atomic<int32_t> PWMactive, trig_PWMactive;
            std::atomic<int32_t> PWMspeed, cv_PWMspeed;
            std::atomic<int32_t> PWMdepth, cv_PWMdepth;
            std::atomic<int32_t> SubOscTune_A, cv_SubOscTune_A;
            std::atomic<int32_t> SubOscTuningBactive, trig_SubOscTuningBactive;
            std::atomic<int32_t> SubOscTune_B, cv_SubOscTune_B;
            std::atomic<int32_t> FXIsActive, trig_FXIsActive;
            std::atomic<int32_t> FXEnsChor, trig_FXEnsChor;
            std::atomic<int32_t> FXDepth, cv_FXDepth;
            std::atomic<int32_t> FXAmt, cv_FXAmt;
            // sectionHpp
        };
    }
}