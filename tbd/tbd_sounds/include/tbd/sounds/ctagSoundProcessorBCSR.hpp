/***************
CTAG TBD >>to be determined<< is an open source eurorack synthesizer module.

A project conceived within the Creative Technologies Arbeitsgruppe of
Kiel University of Applied Sciences: https://www.creative-technologies.de

(c) 2020 by Robert Manzke. All rights reserved.

The CTAG TBD software is licensed under the GNU General Public License
(GPL 3.0), available here: https://www.gnu.org/licenses/gpl-3.0.txt

The CTAG TBD hardware design is released under the Creative Commons
Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0).
Details here: https://creativecommons.org/licenses/by-nc-sa/4.0/

CTAG TBD is provided "as is" without any express or implied warranties.

License and copyright details for specific submodules are included in their
respective component folders / files if different from this license.
***************/

#include <atomic>
#include <tbd/sound_processor.hpp>
#include "helpers/ctagADEnv.hpp"

namespace CTAG {
    namespace SP {
        class ctagSoundProcessorBCSR : public ctagSoundProcessor {
        public:
            virtual void Process(const ProcessData &) override;

           virtual void Init(std::size_t blockSize, void *blockPtr) override;

        private:

            virtual void knowYourself() override;

            void updateParams(const ProcessData &data);

            // private attributes could go here
            float phase;
            float prevSample;
            bool bcEGTrig, srEGTrig;
            HELPERS::ctagADEnv egSR, egBC;
            float fNormFreq, isSRReduce, fScale, fGain, fDry, fEGBCAmount, fEGSRAmount;
            bool isBitCrush, isInvertWet;

            // autogenerated code here
// sectionHpp
           std::atomic<int32_t> level, cv_level;
           std::atomic<int32_t> invert, trig_invert;
           std::atomic<int32_t> dry, cv_dry;
           std::atomic<int32_t> bc_ena, trig_bc_ena;
           std::atomic<int32_t> bc_amount, cv_bc_amount;
           std::atomic<int32_t> eg_bc_ena, trig_eg_bc_ena;
           std::atomic<int32_t> eg_bc_loop, trig_eg_bc_loop;
           std::atomic<int32_t> eg_bc_le, trig_eg_bc_le;
           std::atomic<int32_t> eg_bc_amount, cv_eg_bc_amount;
           std::atomic<int32_t> eg_bc_att, cv_eg_bc_att;
           std::atomic<int32_t> eg_bc_dec, cv_eg_bc_dec;
           std::atomic<int32_t> sr_ena, trig_sr_ena;
           std::atomic<int32_t> sr_amount, cv_sr_amount;
           std::atomic<int32_t> eg_sr_ena, trig_eg_sr_ena;
           std::atomic<int32_t> eg_sr_loop, trig_eg_sr_loop;
           std::atomic<int32_t> eg_sr_le, trig_eg_sr_le;
           std::atomic<int32_t> eg_sr_amount, cv_eg_sr_amount;
           std::atomic<int32_t> eg_sr_att, cv_eg_sr_att;
           std::atomic<int32_t> eg_sr_dec, cv_eg_sr_dec;
            // sectionHpp
        };
    }
}