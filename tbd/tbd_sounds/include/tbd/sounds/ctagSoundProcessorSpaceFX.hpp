#include <atomic>
#include <tbd/sound_processor.hpp>
#include "helpers/ctagSineSource.hpp"
#include "helpers/ctagFastMath.hpp"
#include "helpers/ctagADEnv.hpp"            // Needed for AD EG (Attack/Decay Envelope Generator)
#include "helpers/ctagADSREnv.hpp"          // Needed for ADSR EG (Attack/Decay/Sustain/Release Envelope Generator)

#include "helpers/ctagWNoiseGen.hpp"
#include "helpers/ctagPNoiseGen.hpp"
#include "helpers/ctagFBDelayLine.hpp"
#include "mifx/reverb.h"

// --- VULT "Library for TBD" ---
#include "./vult/vult_formantor.h"
#include "./vult/vult_formantor.tables.h"

using namespace CTAG::SP::HELPERS;
namespace CTAG {
    namespace SP {
        class ctagSoundProcessorSpaceFX : public ctagSoundProcessor {
        public:
            virtual void Process(const ProcessData &) override;
            virtual void Init(std::size_t blockSize, void *blockPtr) override;
            virtual ~ctagSoundProcessorSpaceFX();

        private:
            virtual void knowYourself() override;
		
            // --- Remember status of triggers / buttons ---
            inline int process_param_trig( const ProcessData &data, int trig_myparm, int my_parm, int prev_trig_state_id, int gate_type ); // rescale incoming data to bool
            enum trig_states
            {
                e_Trigger, e_Gate, e_ADenvNegative, e_ADtoSawLFOfrequ, e_ADSRtoSineLFOfrequ, e_ADSRenvNegative, e_ADegLoop, e_ADenvToVCA, e_ADSRenvToVCA,
                e_EnableNoise, e_SineEnable, e_PulseEnable, e_SawEnable, e_SquareEnable, e_SnH1Enable, e_SnH2Enable, e_EnableNoiseMod, e_ADenvEnable, e_ADSRenvEnable,
                e_ReverbEnable, e_ReverbIsMono, e_DelayEnable, e_DelayTimeShortened, e_VintageResonance, e_PitchToCutoff, e_SpaceFX_options_max
            };
            int prev_trig_state[e_SpaceFX_options_max] = {0};   // Initialize _all_ entries with "low value"
            bool low_reached[e_SpaceFX_options_max] = {false};  // We need this for look for toggle-events

            // --- Oscillators / LFOs ---
            ctagSineSource sine;
            ctagSineSource pulse;
            ctagSineSource lfoPWM;
            ctagSineSource square;

            ctagSineSource snh_sine_1;
            ctagSineSource snh_sine_2;

            // --- Noise inkl. modulation ---
            ctagWNoiseGen wNoise;
            ctagPNoiseGen pNoise;
            ctagSineSource noiseColourMod;
            ctagSineSource noiseLevelMod;

            ctagWNoiseGen snh_noise_1;
            ctagPNoiseGen snh_noise_2;

            // --- Envelopes ---
            ctagADEnv   eg_ad;
            ctagADSREnv eg_adsr;

            // --- Sample and Hold states and values ---
            bool snh_1_hold = false;
            bool snh_2_hold = false;
            float snh_1 = 0.f;
            float snh_2 = 0.f;

            // --- VULT Stuff ---
            Saw_eptr__ctx_type_0 saw_data;              // Saw oscillator data-structure
            Ladder__ctx_type_8 ladder_data;             // Ladder filter data-structure
            Ladder__ctx_type_6 ladder_vintage_data;     // Euler ladder algorithm

            // --- Delay ---
            const uint32_t maxDelayLength {88200};
            const uint32_t shorterMaxDelayLength = maxDelayLength / 4;    // We have an option to shorten the delay-range for slapback delays
            HELPERS::ctagFBDelayLine dlyLine {maxDelayLength};
            float m_DelayTime = 0.f;          // Hysteresis values... (avoiding too abrupt changes...)
            float m_DelayFeedback = 0.f;

            // --- Mi Verb ---
            mifx::Reverb reverb;
            float *reverb_buffer;

            // private attributes could go here
            // autogenerated code here
            // sectionHpp
			std::atomic<int32_t> Trigger, trig_Trigger;
			std::atomic<int32_t> MasterPitch, cv_MasterPitch;
			std::atomic<int32_t> MasterTune, cv_MasterTune;
			std::atomic<int32_t> FilterTracking, cv_FilterTracking;
			std::atomic<int32_t> Volume, cv_Volume;
			std::atomic<int32_t> EnableNoise, trig_EnableNoise;
			std::atomic<int32_t> NoiseColour, cv_NoiseColour;
			std::atomic<int32_t> MixedNoiseLevel, cv_MixedNoiseLevel;
			std::atomic<int32_t> EnableNoiseMod, trig_EnableNoiseMod;
			std::atomic<int32_t> NoiseColourModSpeed, cv_NoiseColourModSpeed;
			std::atomic<int32_t> NoiseColourModAmount, cv_NoiseColourModAmount;
			std::atomic<int32_t> NoiseLevelModSpeed, cv_NoiseLevelModSpeed;
			std::atomic<int32_t> NoiseLevelModAmount, cv_NoiseLevelModAmount;
			std::atomic<int32_t> PitchToCutoff, trig_PitchToCutoff;
			std::atomic<int32_t> Cutoff, cv_Cutoff;
			std::atomic<int32_t> Resonance, cv_Resonance;
			std::atomic<int32_t> VintageResonance, trig_VintageResonance;
			std::atomic<int32_t> CutoffModulationAmount, cv_CutoffModulationAmount;
			std::atomic<int32_t> ResonanceModulationAmount, cv_ResonanceModulationAmount;
			std::atomic<int32_t> AmplitudeModulationAmount, cv_AmplitudeModulationAmount;
			std::atomic<int32_t> ADenvEnable, trig_ADenvEnable;
			std::atomic<int32_t> ADenvToVCA, trig_ADenvToVCA;
			std::atomic<int32_t> ADattack, cv_ADattack;
			std::atomic<int32_t> ADdecay, cv_ADdecay;
			std::atomic<int32_t> ADegLoop, trig_ADegLoop;
			std::atomic<int32_t> ADenvNegative, trig_ADenvNegative;
			std::atomic<int32_t> ADenvelopeCutoffAmount, cv_ADenvelopeCutoffAmount;
			std::atomic<int32_t> ADenvelopeResonanceAmount, cv_ADenvelopeResonanceAmount;
			std::atomic<int32_t> ADtoSawLFOfrequ, trig_ADtoSawLFOfrequ;
			std::atomic<int32_t> ADtoSawSpeedLevel, cv_ADtoSawSpeedLevel;
			std::atomic<int32_t> ADSRenvEnable, trig_ADSRenvEnable;
			std::atomic<int32_t> ADSRenvToVCA, trig_ADSRenvToVCA;
			std::atomic<int32_t> ADSRattack, cv_ADSRattack;
			std::atomic<int32_t> ADSRdecay, cv_ADSRdecay;
			std::atomic<int32_t> ADSRsustain, cv_ADSRsustain;
			std::atomic<int32_t> ADSRrelease, cv_ADSRrelease;
			std::atomic<int32_t> ADSRenvNegative, trig_ADSRenvNegative;
			std::atomic<int32_t> ADSRenvelopeCutoffAmount, cv_ADSRenvelopeCutoffAmount;
			std::atomic<int32_t> ADSRenvelopeResonanceAmount, cv_ADSRenvelopeResonanceAmount;
			std::atomic<int32_t> ADSRtoSineLFOfrequ, trig_ADSRtoSineLFOfrequ;
			std::atomic<int32_t> ADSRtoSineSpeedLevel, cv_ADSRtoSineSpeedLevel;
			std::atomic<int32_t> SnH1Enable, trig_SnH1Enable;
			std::atomic<int32_t> SnH1Freq, cv_SnH1Freq;
			std::atomic<int32_t> SnH1CutoffLevel, cv_SnH1CutoffLevel;
			std::atomic<int32_t> SnH1ResonanceLevel, cv_SnH1ResonanceLevel;
			std::atomic<int32_t> SnH1AMlevel, cv_SnH1AMlevel;
			std::atomic<int32_t> SnH1FrequSnH2Change, cv_SnH1FrequSnH2Change;
			std::atomic<int32_t> SnH1FrequSquareChange, cv_SnH1FrequSquareChange;
			std::atomic<int32_t> SnH1ADattackChange, cv_SnH1ADattackChange;
			std::atomic<int32_t> SnH2Enable, trig_SnH2Enable;
			std::atomic<int32_t> SnH2Freq, cv_SnH2Freq;
			std::atomic<int32_t> SnH2CutoffLevel, cv_SnH2CutoffLevel;
			std::atomic<int32_t> SnH2ResonanceLevel, cv_SnH2ResonanceLevel;
			std::atomic<int32_t> SnH2AMlevel, cv_SnH2AMlevel;
			std::atomic<int32_t> SnH2FrequSnH1Change, cv_SnH2FrequSnH1Change;
			std::atomic<int32_t> SnH2FrequPulseChange, cv_SnH2FrequPulseChange;
			std::atomic<int32_t> SnH2ADdecayChange, cv_SnH2ADdecayChange;
			std::atomic<int32_t> SineEnable, trig_SineEnable;
			std::atomic<int32_t> SineFreq, cv_SineFreq;
			std::atomic<int32_t> SineCutoffAmount, cv_SineCutoffAmount;
			std::atomic<int32_t> SineResonanceAmount, cv_SineResonanceAmount;
			std::atomic<int32_t> SineAMamount, cv_SineAMamount;
			std::atomic<int32_t> PulseEnable, trig_PulseEnable;
			std::atomic<int32_t> PulseFreq, cv_PulseFreq;
			std::atomic<int32_t> PulseWidth, cv_PulseWidth;
			std::atomic<int32_t> PWMspeed, cv_PWMspeed;
			std::atomic<int32_t> PWMamount, cv_PWMamount;
			std::atomic<int32_t> PulseCutoffAmount, cv_PulseCutoffAmount;
			std::atomic<int32_t> PulseResonanceAmount, cv_PulseResonanceAmount;
			std::atomic<int32_t> PulseAMamount, cv_PulseAMamount;
			std::atomic<int32_t> SawEnable, trig_SawEnable;
			std::atomic<int32_t> SawFreq, cv_SawFreq;
			std::atomic<int32_t> SawCutoffAmount, cv_SawCutoffAmount;
			std::atomic<int32_t> SawResonanceAmount, cv_SawResonanceAmount;
			std::atomic<int32_t> SawAMamount, cv_SawAMamount;
			std::atomic<int32_t> SquareEnable, trig_SquareEnable;
			std::atomic<int32_t> SquareFreq, cv_SquareFreq;
			std::atomic<int32_t> SquareCutoffAmount, cv_SquareCutoffAmount;
			std::atomic<int32_t> SquareResonanceAmount, cv_SquareResonanceAmount;
			std::atomic<int32_t> SquareAMamount, cv_SquareAMamount;
			std::atomic<int32_t> DelayEnable, trig_DelayEnable;
			std::atomic<int32_t> DelayTimeShortened, trig_DelayTimeShortened;
			std::atomic<int32_t> DelayTime, cv_DelayTime;
			std::atomic<int32_t> DelayFeedback, cv_DelayFeedback;
			std::atomic<int32_t> DelayDryWet, cv_DelayDryWet;
			std::atomic<int32_t> ReverbEnable, trig_ReverbEnable;
			std::atomic<int32_t> ReverbIsMono, trig_ReverbIsMono;
			std::atomic<int32_t> RevInputGain, cv_RevInputGain;
			std::atomic<int32_t> RevDiffusion, cv_RevDiffusion;
			std::atomic<int32_t> RevTime, cv_RevTime;
			std::atomic<int32_t> RevLowpass, cv_RevLowpass;
			std::atomic<int32_t> RevLFO1, cv_RevLFO1;
			std::atomic<int32_t> RevLFO2, cv_RevLFO2;
			std::atomic<int32_t> RevAmount, cv_RevAmount;
			// sectionHpp
        };
    }
}