#include <atomic>
#include <tbd/sound_processor.hpp>

#include "helpers/ctagWNoiseGen.hpp"
#include "helpers/ctagPNoiseGen.hpp"
#include "helpers/ctagSineSource.hpp"

#include "filters/ctagWPkorg35.hpp"
#include "fx/ctagPebble.hpp"
#include "../mutable/eurorack/stmlib/stmlib.h"      // for CONSTRAIN Macro...

using namespace CTAG::SP::HELPERS;

namespace CTAG
{
  namespace SP
  {
    class ctagSoundProcessorMSxxNoise : public ctagSoundProcessor
    {
      public:
        virtual void Process(const ProcessData &) override;
       virtual void Init(std::size_t blockSize, void *blockPtr) override;
        virtual ~ctagSoundProcessorMSxxNoise();

      private:
        virtual void knowYourself() override;

        // --- Remember status of triggers / buttons ---
        inline int process_param_trig( const ProcessData &data, int trig_myparm, int my_parm, int prev_trig_state_id, int gate_type ); // rescale incoming data to bool
        enum trig_states
        {
            e_PinkActive, e_WhiteActive, e_MGisSquare, e_SaturationActive, e_MGactive, e_FilterBypass, e_PhaserPreset, e_PhaserBypass,
            e_ExternalActive, e_Switch_1, e_Switch_2, e_VibratoMode, e_Invert, e_MSxxNoise_options_max
        };
        int prev_trig_state[e_MSxxNoise_options_max] = {0};   // Initialize _all_ entries with "low value"
        bool low_reached[e_MSxxNoise_options_max] = {false};  // We need this for look for toggle-events

        // --- White Noise ---
        ctagWNoiseGen wNoise;
        ctagPNoiseGen pNoise;

        // --- Filter ---
        ctagWPkorg35 wpKorg35;
        ctagSineSource mg;

        // --- Phaser ---
        ctagPebble phaser;

        // private attributes could go here
        // autogenerated code here
        // sectionHpp
        std::atomic<int32_t> ExternalActive, trig_ExternalActive;
        std::atomic<int32_t> NoiseExternalBalance, cv_NoiseExternalBalance;
        std::atomic<int32_t> PinkActive, trig_PinkActive;
        std::atomic<int32_t> WhiteActive, trig_WhiteActive;
        std::atomic<int32_t> PinkWhiteBalance, cv_PinkWhiteBalance;
        std::atomic<int32_t> Volume, cv_Volume;
        std::atomic<int32_t> FilterBypass, trig_FilterBypass;
        std::atomic<int32_t> SaturationActive, trig_SaturationActive;
        std::atomic<int32_t> Saturation, cv_Saturation;
        std::atomic<int32_t> Cutoff, cv_Cutoff;
        std::atomic<int32_t> Resonance, cv_Resonance;
        std::atomic<int32_t> MGactive, trig_MGactive;
        std::atomic<int32_t> MGisSquare, trig_MGisSquare;
        std::atomic<int32_t> MGspeed, cv_MGspeed;
        std::atomic<int32_t> MGamnt, cv_MGamnt;
        std::atomic<int32_t> PhaserBypass, trig_PhaserBypass;
        std::atomic<int32_t> PhaserDryWet, cv_PhaserDryWet;
        std::atomic<int32_t> PhaserPreset, trig_PhaserPreset;
        std::atomic<int32_t> PhaserColor, cv_PhaserColor;
        std::atomic<int32_t> PhaserLFOfrequency, cv_PhaserLFOfrequency;
        std::atomic<int32_t> PhaserFeedbackDepth, cv_PhaserFeedbackDepth;
        std::atomic<int32_t> PhaserFeedbackBassCut, cv_PhaserFeedbackBassCut;
        // sectionHpp
        };
    }
}